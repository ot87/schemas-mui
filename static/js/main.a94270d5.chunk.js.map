{"version":3,"sources":["api/index.js","redux/reducers/schemas.js","redux/reducers/ui.js","components/utils/customPrimaryColors.js","components/Common/CustomPrimaryThemeProvider/CustomPrimaryThemeProvider.js","components/Common/CustomButton/CustomButton.js","components/utils/customBreakpoints.js","components/Common/CustomButton/index.js","components/Schemas/SchemasTabs/SchemasTabs.js","components/Schemas/SchemasPanel/SchemasPanel.js","components/DarkThemeSwitcher/DarkThemeSwitcher.js","components/Header/Header.js","components/Header/index.js","components/Schemas/Schema/Schema.js","components/Schemas/SchemasGrid/SchemasGrid.js","components/Schemas/SchemaForm/FormField/FormField.js","components/Schemas/SchemaForm/FormItemsControls/FormItemsControls.js","components/Schemas/SchemaForm/FormItems/FormItemsRow/FormItemsRow.js","components/Schemas/SchemaForm/FormItems/FormItems.js","components/Schemas/SchemaForm/FormButtons/FormButtons.js","components/Schemas/SchemaForm/utils/useRemoveItems.js","components/Schemas/SchemaForm/SchemaForm.js","components/Schemas/AddSchemaForm/AddSchemaForm.js","components/Schemas/EditSchemaForm/EditSchemaForm.js","components/Common/CustomCard/CustomCard.js","components/Common/CustomCard/index.js","components/Schemas/CustomCardGridItem/CustomCardGridItem.js","components/Common/CustomCard/CustomCardButtons.js","components/Schemas/CustomCardButtonsGridItem/CustomCardButtonsGridItem.js","components/Schemas/SchemasBoard/SchemasBoard.js","components/Content/Content.js","components/Schemas/Dashboard/Dashboard.js","App.js","redux/reducers/index.js","index.js","redux/store/configureAppStore.js"],"names":["API","key","init","this","saveData","data","localStorage","setItem","JSON","stringify","loadData","parse","getItem","schemas","loadSchemas","length","nanoid","Promise","resolve","addSchema","payload","id","push","updateSchema","updateId","findIndex","schema","deleteSchema","filter","schemasAdapter","createEntityAdapter","createAsyncThunk","_","a","extra","response","initialState","getInitialState","schemasSlice","createSlice","name","reducers","extraReducers","fulfilled","setAll","addOne","upsertOne","removeOne","getSelectors","state","selectSchemas","selectAll","selectSchemasIds","selectIds","selectById","selectSchemasCount","selectTotal","selectSchemaById","UiModes","activeSchemaId","mode","darkTheme","uiSlice","setActiveSchemaId","action","setMode","toggleDarkTheme","actions","selectActiveSchemaId","ui","selectMode","selectDarkTheme","customPrimaryColors","colors","light","green","main","shades","yellow","amber","red","dark","CustomPrimaryThemeProvider","themeColor","children","includes","ThemeProvider","theme","palette","customColor","type","primary","augmentColor","contrastText","background","default","useStyles","makeStyles","root","margin","spacing","breakpoints","down","outlined","backgroundColor","paper","clicked","cursor","CustomButton","isCustomColor","onClick","text","isClicked","isToggled","isDisabled","classes","xxsScreen","useMediaQuery","xsScreen","Button","cn","color","disabled","disableElevation","disableFocusRipple","disableRipple","size","variant","CustomButtonContainer","restProps","SchemasTabs","useSelector","dispatch","useDispatch","Tabs","className","value","onChange","newId","indicatorColor","map","Tab","label","SchemasPanel","schemasCount","isAdd","isEdit","isDelete","dispatchSetMode","handleClick","newMode","xxxsScreen","Box","display","mx","my","order","DarkThemeSwitcher","isDarkTheme","themeIcon","data-testid","Tooltip","title","arrow","IconButton","aria-label","toolbar","flexWrap","isWrap","justifyContent","padding","paddingLeft","paddingRight","button","Header","appBarPosition","showInHeader","handleButtonClick","showPanel","AppBar","position","Toolbar","HeaderContainer","isSchemasClicked","setIsSchemasClicked","isShowSchema","Boolean","textAlign","Schema","smScreen","Grid","role","alignContent","container","justify","item","xs","Paper","description","sm","md","items","quantity","time","rowGap","SchemasGrid","render","schemasIds","schemaId","textfield","input","borderColor","notchedOutline","error","shrink","FormField","multiline","placeholder","rows","validate","meta","TextField","touched","fullWidth","InputProps","required","flexDirection","FormItemsControls","isRemoveClicked","showRemove","isRemoveAllClicked","addOnClick","removeOnClick","removeAllOnClick","row","borderRadius","shape","FormItemsRow","onRowClick","onValidate","FormItems","initItems","itemsIdsToRemove","onItemsRowClick","initialValue","fields","index","indexOf","FormButtons","submit","reset","cancel","useRemoveItems","useState","setIsRemoveClicked","setItemsIdsToRemove","setIsRemoveAllClicked","removeBatch","keys","newItemsIdsToRemove","concat","bar","marginBottom","form","width","SchemaForm","onSubmit","onCancel","initialValues","mutators","arrayMutators","handleSubmit","submitting","dirty","values","top","zIndex","AddSchemaForm","EditSchemaForm","height","actionArea","alignItems","highlight","header","content","overflow","whiteSpace","subheader","CustomCard","cardContent","CardHeader","CardContent","Typography","component","CardActionArea","focusHighlight","Card","elevation","CustomCardContainer","CustomCardGridItem","CustomCardButtons","buttons","first","second","isCardClicked","CustomCardButtonsGridItem","onDeleteClick","onCardClick","SchemasBoard","schemasBoard","cardThemeColor","Content","p","rootContainer","gutters","rootBox","minHeight","Dashboard","Container","maxWidth","disableGutters","App","muiTheme","createMuiTheme","useEffect","CssBaseline","reducer","combineReducers","preloadedState","store","configureStore","middleware","getDefaultMiddleware","thunk","extraArgument","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a94270d5.chunk.js","sourcesContent":["import { nanoid } from '@reduxjs/toolkit';\n\nconst API = {\n    key: null,\n\n    init(key) {\n        this.key = key;\n    },\n    saveData(data) {\n        localStorage.setItem(this.key, JSON.stringify(data));\n    },\n    loadData() {\n        return JSON.parse(localStorage.getItem(this.key)) || { schemas: [] };\n    },\n    loadSchemas() {\n        let { schemas } = API.loadData();\n\n        // TODO with demo schema\n        if (!schemas.length) {\n            schemas = [{\"id\":nanoid(),\"name\":\"Demo Schema 1\",\"description\":\"Demo Schema 1 Description\",\"items\":[{\"id\":1,\"name\":\"Item 1\",\"quantity\":\"Quantity 1\",\"time\":\"Time 1\"},{\"id\":2,\"name\":\"Item 2\",\"quantity\":\"Quantity 2\",\"time\":\"Time 2\"},{\"id\":3,\"name\":\"Item 3\",\"quantity\":\"Quantity 3\",\"time\":\"Time 3\"},{\"id\":4,\"name\":\"Item 4\",\"quantity\":\"Quantity 4\",\"time\":\"Time 4\"},{\"id\":5,\"name\":\"Item 5\",\"quantity\":\"Quantity 5\",\"time\":\"Time 5\"},{\"id\":6,\"name\":\"Item 6\",\"quantity\":\"Quantity 6\",\"time\":\"Time 6\"},{\"id\":7,\"name\":\"Item 7\",\"quantity\":\"Quantity 7\",\"time\":\"Time 7\"},{\"id\":8,\"name\":\"Item 8\",\"quantity\":\"Quantity 8\",\"time\":\"Time 8\"},{\"id\":10,\"name\":\"Item 10\",\"quantity\":\"Quantity 10\",\"time\":\"Time 10\"},{\"id\":11,\"name\":\"Item 11\",\"quantity\":\"Quantity 11\",\"time\":\"Time 11\"},{\"id\":12,\"name\":\"Item 12\",\"quantity\":\"Quantity 12\",\"time\":\"Time 12\"},{\"id\":13,\"name\":\"Item 13\",\"quantity\":\"Quantity 13\",\"time\":\"Time 13\"},{\"id\":14,\"name\":\"Item 14\",\"quantity\":\"Quantity 14\",\"time\":\"Time 14\"},{\"id\":15,\"name\":\"Item 15\",\"quantity\":\"Quantity 15\",\"time\":\"Time 15\"}]}];\n            API.saveData({ schemas });\n        }\n\n        return Promise.resolve({ data: schemas });\n    },\n    addSchema(payload) {\n        const data = this.loadData();\n        payload.id = nanoid();\n        data.schemas.push(payload);\n\n        this.saveData(data);\n\n        return Promise.resolve({ data: payload });\n    },\n    updateSchema(payload) {\n        const data = this.loadData();\n        const updateId = data.schemas.findIndex(schema => schema.id === payload.id);\n        data.schemas[updateId] = payload;\n\n        this.saveData(data);\n\n        return Promise.resolve({ data: data.schemas[updateId] });\n    },\n    deleteSchema(payload) {\n        const data = this.loadData();\n        data.schemas = data.schemas.filter(schema => schema.id !== payload);\n\n        this.saveData(data);\n\n        return Promise.resolve({ data: payload });\n    }\n};\n\nexport default API;\n","import {\n    createSlice,\n    createAsyncThunk,\n    createEntityAdapter\n} from '@reduxjs/toolkit';\n\nconst schemasAdapter = createEntityAdapter();\n\nexport const loadSchemas = createAsyncThunk(\n    'schemas/loadSchemas',\n    async (_, { extra }) => {\n        const response = await extra.loadSchemas();\n        return response.data;\n    }\n);\n\nexport const addSchema = createAsyncThunk(\n    'schemas/addSchema',\n    async (schema, { extra }) => {\n        const response = await extra.addSchema(schema);\n        return response.data;\n    }\n);\n\nexport const updateSchema = createAsyncThunk(\n    'schemas/updateSchema',\n    async (schema, { extra }) => {\n        const response = await extra.updateSchema(schema);\n        return response.data;\n    }\n);\n\nexport const deleteSchema = createAsyncThunk(\n    'schemas/deleteSchema',\n    async (id, { extra }) => {\n        const response = await extra.deleteSchema(id);\n        return response.data;\n    }\n);\n\nexport const initialState = schemasAdapter.getInitialState();\n\nconst schemasSlice = createSlice({\n    name: 'schemas',\n    initialState,\n    reducers: {},\n    extraReducers: {\n        //@ts-ignore\n        [loadSchemas.fulfilled]:  schemasAdapter.setAll,\n        //@ts-ignore\n        [addSchema.fulfilled]:    schemasAdapter.addOne,\n        //@ts-ignore\n        [updateSchema.fulfilled]: schemasAdapter.upsertOne,\n        //@ts-ignore\n        [deleteSchema.fulfilled]: schemasAdapter.removeOne\n    }\n});\n\nexport default schemasSlice.reducer;\n\nconst {\n    selectAll: selectSchemas,\n    selectIds: selectSchemasIds,\n    selectById,\n    selectTotal: selectSchemasCount\n} = schemasAdapter.getSelectors(state => state.schemas);\n\nexport { selectSchemas, selectSchemasIds, selectSchemasCount };\n\nexport const selectSchemaById = id => state => selectById(state, id);\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { addSchema, updateSchema, deleteSchema } from './schemas';\n\n/**\n * Enum for the modes of the ui.\n * @enum {string}\n */\nexport const UiModes = {\n    SHOW: 'SHOW',\n    ADD: 'ADD',\n    EDIT: 'EDIT',\n    DELETE: 'DELETE'\n};\n\nexport const initialState = {\n    activeSchemaId: null,\n    mode: UiModes.SHOW,\n    darkTheme: false\n};\n\nconst uiSlice = createSlice({\n    name: 'ui',\n    initialState,\n    reducers: {\n        setActiveSchemaId(state, action) {\n            state.activeSchemaId = action.payload;\n        },\n        setMode(state, action) {\n            state.mode = action.payload;\n        },\n        toggleDarkTheme(state) {\n            state.darkTheme = !state.darkTheme;\n        }\n    },\n    extraReducers: {\n        //@ts-ignore\n        [addSchema.fulfilled]: (state) => {\n            state.mode = UiModes.SHOW;\n        },\n        //@ts-ignore\n        [updateSchema.fulfilled]: (state) => {\n            state.activeSchemaId = null;\n        },\n        //@ts-ignore\n        [deleteSchema.fulfilled]: (state) => {\n            state.activeSchemaId = null;\n        }\n    }\n});\n\nexport const { setActiveSchemaId, setMode, toggleDarkTheme } = uiSlice.actions;\n\nexport default uiSlice.reducer;\n\nexport const selectActiveSchemaId = (state) => state.ui.activeSchemaId;\nexport const selectMode = (state) => state.ui.mode;\nexport const selectDarkTheme = (state) => state.ui.darkTheme;\n","import green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport red   from '@material-ui/core/colors/red';\n\nconst customPrimaryColors = {\n    colors: ['green', 'yellow', 'red'],\n    light: {\n        green: {\n            main: green[500],\n            shades: []\n        },\n        yellow: {\n            main: amber[500],\n            shades: []\n        },\n        red: {\n            main: red[500],\n            shades: []\n        }\n    },\n    dark: {\n        green: {\n            main: green[300],\n            shades: [300, 200, 400]\n        },\n        yellow: {\n            main: amber[300],\n            shades: [300, 200, 400]\n        },\n        red: {\n            main: red[300],\n            shades: [300, 200, 400]\n        }\n    }\n};\n\nexport default customPrimaryColors;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport customPrimaryColors from 'components/utils/customPrimaryColors';\n\nimport { ThemeProvider } from '@material-ui/core/styles';\n\n/**\n * Sets a new primary color for the ThemeProvider and wraps passed children wtih it. Returns children intact if themeColor is unknown or undefined.\n * @param {Object}                           props\n * @param {'green'|'yellow'|'red'|'default'} [props.themeColor] - A color of the theme to set to the ThemeProvider.\n * @param {JSX.Element}                      props.children     - Content to be wrapped with the ThemeProvider.\n */\nconst CustomPrimaryThemeProvider = ({ themeColor = 'default', children }) => {\n    const isCustomColor = customPrimaryColors.colors.includes(themeColor);\n    const getCustomPrimary = theme => {\n        const { palette } = theme;\n        const customColor = customPrimaryColors[palette.type][themeColor];\n\n        return ({\n            ...theme,\n            palette: {\n                ...palette,\n                primary: palette.augmentColor(\n                    {\n                        main: customColor.main,\n                        contrastText: palette.background.default\n                    },\n                    ...customColor.shades\n                )\n            }\n        });\n    };\n\n    return (\n        isCustomColor ? (\n            <ThemeProvider theme={getCustomPrimary}>\n                {children}\n            </ThemeProvider>\n        )\n        : children\n    );\n};\n\nCustomPrimaryThemeProvider.propTypes = {\n    themeColor: PropTypes.oneOf(['green', 'yellow', 'red', 'default']),\n    children:   PropTypes.node.isRequired\n};\n\nexport default CustomPrimaryThemeProvider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport { lxs } from 'components/utils/customBreakpoints';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n        [theme.breakpoints.down(lxs)]: {\n            margin: theme.spacing(0.5)\n        }\n    },\n    outlined: {\n        backgroundColor: theme.palette.background.paper\n    },\n    clicked: {\n        '&:hover': {\n            backgroundColor: theme.palette.primary.main,\n            cursor: 'auto'\n        }\n    }\n}));\n\n/**\n * Callback for events handling.\n * @callback EventHandler\n */\n\n/**\n * Functional component which renders a custom clickable or togglable button.\n * @param {Object}                                 props\n * @param {boolean}                                [props.isCustomColor] - Color theme of the CustomButton.\n * @param {'clicked'|'toggled'|'disabled'|'shown'} [props.type]          - Indicates a type of the CustomButton. If it's clicked, onClick is nullified; if it's toggled, the CustomButton is clicked and stayed clickable; if it's disabled, the CustomButton is disabled.\n * @param {EventHandler}                           props.onClick         - On click function for the CustomButton.\n * @param {string}                                 props.text            - Text to display on the CustomButton.\n */\nconst CustomButton = ({\n    isCustomColor = false,\n    type = 'shown',\n    onClick,\n    text\n}) => {\n    const isClicked  = type === 'clicked';\n    const isToggled  = type === 'toggled';\n    const isDisabled = type === 'disabled';\n\n    const classes   = useStyles();\n    const xxsScreen = useMediaQuery(theme => theme.breakpoints.down(lxs));\n    const xsScreen  = useMediaQuery(theme => theme.breakpoints.down('xs'));\n\n    return (\n        <Button\n            classes={{\n                root: cn({\n                    [classes.root]: true,\n                    [classes.clicked]: isClicked\n                }),\n                outlined: classes.outlined\n            }}\n            color={isCustomColor || isClicked ? 'primary' : 'default'}\n            disabled={isDisabled}\n            disableElevation={isClicked}\n            disableFocusRipple={isClicked}\n            disableRipple={isClicked}\n            onClick={isClicked ? null : onClick}\n            size={(\n                xxsScreen ?\n                    'small'\n                : xsScreen ?\n                    'medium'\n                : 'large'\n            )}\n            variant={isClicked || isToggled ? 'contained' : 'outlined'}\n        >\n            {text}\n        </Button>\n    );\n};\n\nCustomButton.propTypes = {\n    isCustomColor: PropTypes.bool,\n    type:          PropTypes.oneOf(['clicked', 'toggled', 'disabled', 'shown']),\n    onClick:       PropTypes.func.isRequired,\n    text:          PropTypes.string.isRequired\n};\n\nexport default CustomButton;\n","export const mxs = 350; \nexport const lxs = 435; \n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport customPrimaryColors from 'components/utils/customPrimaryColors';\nimport CustomPrimaryThemeProvider from 'components/Common/CustomPrimaryThemeProvider/CustomPrimaryThemeProvider';\nimport CustomButton from './CustomButton';\n\n/**\n * Callback for events handling.\n * @callback EventHandler\n */\n\n/**\n * Functional component which renders a custom clickable or togglable button.\n * @param {Object}                                 props\n * @param {'green'|'yellow'|'red'|'default'}       [props.themeColor] - A color of the theme of the CustomButton.\n * @param {'clicked'|'toggled'|'disabled'|'shown'} [props.type]       - Indicates a type of the CustomButton. If it's clicked, onClick is nullified; if it's toggled, the CustomButton is clicked and stayed clickable; if it's disabled, the CustomButton is disabled.\n * @param {EventHandler}                           props.onClick      - On click function for the CustomButton.\n * @param {string}                                 props.text         - Text to display on the CustomButton.\n */\nconst CustomButtonContainer = ({\n    themeColor = 'default',\n    type = 'shown',\n    ...restProps\n}) => {\n    const isCustomColor = customPrimaryColors.colors.includes(themeColor);\n\n    return (\n        <CustomPrimaryThemeProvider\n            themeColor={type === 'disabled' ? 'default' : themeColor}\n        >\n            <CustomButton\n                isCustomColor={isCustomColor}\n                type={type}\n                {...restProps}\n            />\n        </CustomPrimaryThemeProvider>\n    );\n};\n\nCustomButtonContainer.propTypes = {\n    themeColor: PropTypes.oneOf(['green', 'yellow', 'red', 'default']),\n    type:       PropTypes.oneOf(['clicked', 'toggled', 'disabled', 'shown']),\n    onClick:    PropTypes.func.isRequired,\n    text:       PropTypes.string.isRequired\n};\n\nexport default CustomButtonContainer;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { selectActiveSchemaId, setActiveSchemaId } from 'redux/reducers/ui';\nimport { selectSchemas } from 'redux/reducers/schemas';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab  from '@material-ui/core/Tab';\n\nconst useStyles = makeStyles({\n    root: {\n        margin: '0 auto'\n    }\n});\n\n/**\n * Renders a horizontal list of Schemas to choose.\n */\nconst SchemasTabs = () => {\n    const classes = useStyles();\n    const schemas = useSelector(selectSchemas);\n    const activeSchemaId = useSelector(selectActiveSchemaId);\n    const dispatch = useDispatch();\n\n    const handleChange = (_, newId) => dispatch(setActiveSchemaId(newId));\n\n    return (\n        <Tabs\n            className={classes.root}\n            value={activeSchemaId}\n            onChange={handleChange}\n            variant='scrollable'\n            indicatorColor='primary'\n        >\n            {schemas.map(schema => (\n                <Tab key={schema.id} value={schema.id} label={schema.name} />\n            ))}\n        </Tabs>\n    );\n};\n\nexport default SchemasTabs;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport CustomButton from 'components/Common/CustomButton';\n\nimport {\n    UiModes,\n    selectMode,\n    selectActiveSchemaId,\n    setMode\n} from 'redux/reducers/ui';\nimport { selectSchemasCount } from 'redux/reducers/schemas';\nimport { mxs } from 'components/utils/customBreakpoints';\n\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Box from '@material-ui/core/Box';\n\n/**\n * Renders a control panel of [CustomButtons]{@link CustomButton} to set a mode of the ui.\n */\nconst SchemasPanel = () => {\n    const activeSchemaId = useSelector(selectActiveSchemaId);\n    const mode           = useSelector(selectMode);\n    const schemasCount   = useSelector(selectSchemasCount);\n    const dispatch       = useDispatch();\n\n    const isAdd    = mode === UiModes.ADD;\n    const isEdit   = mode === UiModes.EDIT;\n    const isDelete = mode === UiModes.DELETE;\n\n    const dispatchSetMode   = mode => dispatch(setMode(mode));\n    const handleAddClick    = () => dispatchSetMode(UiModes.ADD);\n    const handleEditClick   = () => handleClick(UiModes.EDIT);\n    const handleDeleteClick = () => handleClick(UiModes.DELETE);\n\n    const handleClick = newMode => {\n        if ((isEdit || isDelete) && mode === newMode && !activeSchemaId) {\n            dispatchSetMode(UiModes.SHOW);\n        } else {\n            dispatchSetMode(newMode);\n        }\n    };\n\n    const xxxsScreen = useMediaQuery(theme => theme.breakpoints.down(mxs));\n\n    return (\n        <Box display='flex' mx='auto' my={0} order={xxxsScreen ? 3 : null}>\n            <CustomButton\n                themeColor='green'\n                onClick={handleAddClick}\n                text='Add'\n                type={(\n                    isAdd ?\n                        'clicked'\n                    : (activeSchemaId && (isEdit || isDelete)) ?\n                        'disabled'\n                    : 'shown'\n                )}\n            />\n            {schemasCount ?\n                <>\n                    <CustomButton\n                        themeColor='yellow'\n                        onClick={handleEditClick}\n                        text='Edit'\n                        type={(\n                            (isEdit && activeSchemaId) ?\n                                'clicked'\n                            : isEdit ?\n                                'toggled'\n                            : (isAdd || (activeSchemaId && isDelete)) ?\n                                'disabled'\n                            : 'shown'\n                        )}\n                    />\n                    <CustomButton\n                        themeColor='red'\n                        onClick={handleDeleteClick}\n                        text='Delete'\n                        type={(\n                            (isDelete && activeSchemaId) ?\n                                'clicked'\n                            : isDelete ?\n                                'toggled'\n                            : (isAdd || (activeSchemaId && isEdit)) ?\n                                'disabled'\n                            : 'shown'\n                        )}\n                    />\n                </>\n            : null}\n        </Box>\n    );\n};\n\nexport default SchemasPanel;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { selectDarkTheme, toggleDarkTheme } from 'redux/reducers/ui';\nimport { lxs } from 'components/utils/customBreakpoints';\n\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Tooltip       from '@material-ui/core/Tooltip';\nimport IconButton    from '@material-ui/core/IconButton';\nimport Brightness7OutlinedIcon from '@material-ui/icons/Brightness7Outlined';\nimport Brightness4OutlinedIcon from '@material-ui/icons/Brightness4Outlined';\n\n/**\n * Connected to the store DarkThemeSwitcher component with IconButton to toggle light/dark theme.\n */\nconst DarkThemeSwitcher = () => {\n    const isDarkTheme = useSelector(selectDarkTheme);\n    const dispatch    = useDispatch();\n\n    const handleIconClick = () => dispatch(toggleDarkTheme());\n\n    const themeIcon = isDarkTheme ?\n        <Brightness7OutlinedIcon data-testid='light' />\n    : <Brightness4OutlinedIcon data-testid='dark' />;\n    const xxsScreen = useMediaQuery(theme => theme.breakpoints.down(lxs));\n\n    return (\n        <Tooltip title='Toggle light/dark theme' arrow>\n            <IconButton\n                size={xxsScreen ? 'small' : 'medium'}\n                aria-label='mode'\n                onClick={handleIconClick}\n            >\n                {themeIcon}\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nexport default DarkThemeSwitcher;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CustomButton from 'components/Common/CustomButton';\nimport SchemasTabs  from 'components/Schemas/SchemasTabs/SchemasTabs';\nimport SchemasPanel from 'components/Schemas/SchemasPanel/SchemasPanel';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar  from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport DarkThemeSwitcher from 'components/DarkThemeSwitcher/DarkThemeSwitcher';\n\nconst useStyles = makeStyles(theme => ({\n    toolbar: {\n        flexWrap: ({ isWrap }) => isWrap ? 'wrap' : 'nowrap',\n        justifyContent: 'space-between',\n        padding: theme.spacing(1),\n        [theme.breakpoints.down('xs')]: {\n            paddingLeft: 0,\n            paddingRight: 0\n        }\n    },\n    button: {\n        margin: theme.spacing(1)\n    }\n}));\n\n/**\n * Callback for events handling.\n * @callback EventHandler\n */\n\n/**\n * Header component with control buttons.\n * Consists of three parts - a clickable [CustomButton]{@link CustomButton}, a panel to display either the [SchemasTabs]{@link SchemasTabs} or the control [SchemasPanel]{@link SchemasPanel}, and a [DarkThemeSwitcher]{@link DarkThemeSwitcher} to toggle light/dark mode of the UI.\n * @param {Object}            props\n * @param {'static'|'sticky'} props.appBarPosition    - AppBar position.\n * @param {'panel'|'tabs'}    props.showInHeader      - Indicates a type of element to show - either a control panel or tabs of schemas.\n * @param {EventHandler}      props.handleButtonClick - A click handler of the left button.\n */\nconst Header = ({\n    appBarPosition,\n    showInHeader,\n    handleButtonClick\n}) => {\n    const showPanel = showInHeader === 'panel';\n\n    const classes = useStyles({ isWrap: showPanel });\n\n    return (\n        <AppBar\n            color='inherit'\n            position={appBarPosition}\n        >\n            <Toolbar className={classes.toolbar}>\n                <CustomButton\n                    onClick={handleButtonClick}\n                    text={showPanel ? 'Schemas' : 'Back'}\n                    type={showPanel ? 'clicked' : 'shown'}\n                />\n                {showPanel ?\n                    <SchemasPanel />\n                : <SchemasTabs />}\n                {/* TODO <Plate text={profile.name} onClick={() => setContent(profile)} /> */}\n                <DarkThemeSwitcher />\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nHeader.propTypes = {\n    appBarPosition:    PropTypes.oneOf(['sticky', 'static']).isRequired,\n    showInHeader:      PropTypes.oneOf(['panel', 'tabs']).isRequired,\n    handleButtonClick: PropTypes.func.isRequired\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Header from './Header';\n\nimport {\n    selectActiveSchemaId,\n    selectMode,\n    setActiveSchemaId,\n    UiModes\n} from 'redux/reducers/ui';\n\n/**\n * Connected to the store container for the Header component.\n * @param {Object}   props\n * @param {boolean}  props.isSchemasClicked    - Indicates whether the Schemas button is clicked.\n * @param {function} props.setIsSchemasClicked - Set value of the isSchemasClicked.\n */\nconst HeaderContainer = ({\n    isSchemasClicked,\n    setIsSchemasClicked\n}) => {\n    const activeSchemaId = useSelector(selectActiveSchemaId);\n    const mode           = useSelector(selectMode);\n    const dispatch       = useDispatch();\n\n    const isShowSchema   = Boolean(activeSchemaId) && mode === UiModes.SHOW;\n    const appBarPosition = (\n        mode === UiModes.ADD || (activeSchemaId && mode === UiModes.EDIT) ?\n            'static'\n        : 'sticky'\n    );\n\n    const handleBackClick = () => dispatch(setActiveSchemaId(null));\n    /* TODO profile  const handleSchemasClick = () => setIsSchemasClicked(true);*/\n\n    return (\n        <Header\n            appBarPosition={appBarPosition}\n            showInHeader={(\n                isSchemasClicked && !isShowSchema ?\n                    'panel'\n                : 'tabs'\n            )}\n            handleButtonClick={(\n                handleBackClick\n                /* TODO profile\n                isSchemasClicked && isShowSchema ?\n                    handleBackClick\n                : handleSchemasClick\n                */\n            )}\n        />\n    );\n};\n\nHeaderContainer.propTypes = {\n    isSchemasClicked:    PropTypes.bool.isRequired,\n    setIsSchemasClicked: PropTypes.func.isRequired\n};\n\nexport default HeaderContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport { selectSchemaById } from 'redux/reducers/schemas';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid           from '@material-ui/core/Grid';\nimport Paper          from '@material-ui/core/Paper';\nimport useMediaQuery  from '@material-ui/core/useMediaQuery';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center'\n    }\n}));\n\n/**\n * Shows schema with all its items.\n * @param {Object} props\n * @param {string} props.id - Schema id.\n */\nconst Schema = ({ id }) => {\n    const classes = useStyles();\n    const schema  = useSelector(selectSchemaById(id));\n\n    const smScreen = useMediaQuery(theme => theme.breakpoints.down('sm'));\n    const xsScreen = useMediaQuery(theme => theme.breakpoints.down('xs'));\n\n    return (\n        <Grid\n            role='grid'\n            alignContent='center'\n            container\n            justify='center'\n            spacing={xsScreen ? 2 : 3}\n        >\n            <Grid item xs={7}>\n                <Paper className={classes.paper}>\n                    {schema.name}\n                </Paper>\n            </Grid>\n            {schema.description !== '' ?\n                <Grid item xs={11} sm={10} md={9}>\n                    <Paper className={classes.paper}>\n                        {schema.description}\n                    </Paper>\n                </Grid>\n            : null}\n            {schema.items.map((item, key) => (\n                <Grid\n                    role='gridcell'\n                    container item\n                    justify='center'\n                    alignContent='flex-start'\n                    key={key}\n                    spacing={smScreen ? 1 : 2}\n                    xs={11} sm={6} md={11}\n                >\n                    <Grid item xs={12} md={4}>\n                        <Paper className={classes.paper}>\n                            {item.name}\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <Paper className={classes.paper}>\n                            {item.quantity}\n                        </Paper>\n                    </Grid>\n                    {item.time !== '' ?\n                        <Grid item xs={12} md={4}>\n                            <Paper className={classes.paper}>\n                                {item.time}\n                            </Paper>\n                        </Grid>\n                    : null}\n                </Grid>\n            ))}\n        </Grid>\n    );\n};\n\nSchema.propTypes = {\n    id: PropTypes.string.isRequired\n};\n\nexport default Schema;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport { selectSchemasIds } from 'redux/reducers/schemas';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        rowGap: '3vh',\n        [theme.breakpoints.down('sm')]: {\n            rowGap: '2vh'\n        },\n        [theme.breakpoints.down('xs')]: {\n            rowGap: '1vh'\n        }\n    }\n}));\n\n/**\n * A component to render.\n * @callback renderProp\n * @param {string} id - Schema id\n */\n\n/**\n * Component that selects schemas ids from the store and passes them into the render prop in the loop.\n * @param {Object}     props\n * @param {renderProp} props.render - A component to render with a schema id passed as a prop.\n */\nconst SchemasGrid = ({ render }) => {\n    const classes    = useStyles();\n    const schemasIds = useSelector(selectSchemasIds);\n\n    return (\n        <Box\n            className={classes.root}\n            display='flex'\n            flexWrap='wrap'\n            justifyContent='space-evenly'\n            role='grid'\n        >\n            {schemasIds.map(schemaId => render(schemaId))}\n        </Box>\n    );\n};\n\nSchemasGrid.propTypes = {\n    render: PropTypes.func.isRequired\n};\n\nexport default SchemasGrid;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field } from 'react-final-form';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(({ palette }) => ({\n    textfield: {\n        backgroundColor: palette.background.paper\n    },\n    input: {\n        '&:hover:not($error) $notchedOutline': {\n            borderColor: palette.primary.main\n        }\n    },\n    notchedOutline: {},\n    error: {},\n    shrink: {}\n}));\n\n/**\n * Function with validation rule.\n * @callback ValidationFunction\n * @param {string} value - Value to validate.\n * @returns {boolean} - Indicates whether value is valid.\n */\n\n/**\n * Functional component to wrap the [Field]{@link https://final-form.org/docs/react-final-form/api/Field} component of the [React Final Form]{@link https://final-form.org/react} library.\n * @param {Object}             props\n * @param {boolean}            [props.disabled]    - Indicates whether Field is disabled.\n * @param {string}             props.label         - Field label.\n * @param {boolean}            [props.multiline]   - If multiline is specified, Field is textarea.\n * @param {string}             props.name          - Field name.\n * @param {string}             [props.placeholder] - Field placeholder, if is undefined, label is used.\n * @param {number}             [props.rows]        - Number of rows to display when multiline is true.\n * @param {ValidationFunction} [props.validate]    - Field validation function.\n */\nconst FormField = ({\n    disabled = false,\n    label,\n    multiline = false,\n    name,\n    placeholder,\n    rows,\n    validate\n}) => {\n    const classes = useStyles();\n    const identity = value => value;\n\n    return (\n        <Field name={name} type='text' validate={validate} parse={identity}>\n            {({ input, meta }) => (\n                <TextField\n                    className={classes.textfield}\n                    disabled={disabled}\n                    error={validate && meta.touched && meta.error}\n                    fullWidth\n                    id={name}\n                    InputProps={{ classes: {\n                        root: classes.input,\n                        notchedOutline: classes.notchedOutline,\n                        error: classes.error\n                    } }}\n                    label={label}\n                    multiline={multiline}\n                    placeholder={placeholder || label}\n                    required={!!validate}\n                    rows={rows}\n                    variant='outlined'\n                    {...input}\n                />\n            )}\n        </Field>\n    );\n};\n\nFormField.propTypes = {\n    disabled:    PropTypes.bool,\n    label:       PropTypes.string.isRequired,\n    multiline:   PropTypes.bool,\n    name:        PropTypes.string.isRequired,\n    placeholder: PropTypes.string,\n    rows:        PropTypes.number,\n    validate:    PropTypes.func\n};\n\nexport default FormField;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CustomButton from 'components/Common/CustomButton';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexDirection: 'column',\n        [theme.breakpoints.down('sm')]: {\n            flexDirection: 'row',\n            margin: '0 auto'\n        }\n    }\n}));\n\n/**\n * Callback for events handling.\n * @callback EventHandler\n */\n\n/**\n * Renders [CustomButtons]{@link {CustomButton}} to add new or remove existing items rows while working with [SchemaForm]{@link SchemaForm}.\n * @param {Object}       props\n * @param {boolean}      props.isRemoveClicked    - Indicates whether Remove CustomButton is clicked.\n * @param {boolean}      props.showRemove         - If true, show Remove and All CustomButtons.\n * @param {boolean}      props.isRemoveAllClicked - Indicates whether All CustomButton is clicked.\n * @param {EventHandler} props.addOnClick         - On click function for Add CustomButton.\n * @param {EventHandler} props.removeOnClick      - On click function for Remove CustomButton.\n * @param {EventHandler} props.removeAllOnClick   - On click function for All CustomButton.\n */\nconst FormItemsControls = ({\n    isRemoveClicked,\n    showRemove,\n    isRemoveAllClicked,\n    addOnClick,\n    removeOnClick,\n    removeAllOnClick\n}) => {\n    const classes = useStyles();\n\n    return (\n        <Box\n            className={classes.root}\n            display='flex'\n            role='tablist'\n        >\n            <CustomButton\n                themeColor='green'\n                onClick={addOnClick}\n                text='Add'\n                type={isRemoveClicked ? 'disabled' : 'shown'}\n            />\n            {showRemove ?\n                <CustomButton\n                    themeColor='red'\n                    onClick={removeOnClick}\n                    text='Remove'\n                    type={isRemoveClicked ? 'toggled' : 'shown'}\n                />\n            : null}\n            {showRemove && isRemoveClicked ?\n                <CustomButton\n                    themeColor='red'\n                    onClick={removeAllOnClick}\n                    text='All'\n                    type={isRemoveAllClicked ? 'toggled' : 'shown'}\n                />\n            : null}\n        </Box>\n    );\n};\n\nFormItemsControls.propTypes = {\n    isRemoveClicked:    PropTypes.bool.isRequired,\n    showRemove:         PropTypes.bool.isRequired,\n    isRemoveAllClicked: PropTypes.bool.isRequired,\n    addOnClick:         PropTypes.func.isRequired,\n    removeOnClick:      PropTypes.func.isRequired,\n    removeAllOnClick:   PropTypes.func.isRequired\n};\n\nexport default FormItemsControls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport FormField from 'components/Schemas/SchemaForm/FormField/FormField';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid           from '@material-ui/core/Grid';\nimport useMediaQuery  from '@material-ui/core/useMediaQuery';\nimport red            from '@material-ui/core/colors/red';\n\nconst useStyles = makeStyles(theme => ({\n    row: {\n        '&:hover': {\n            backgroundColor: red[300],\n            borderRadius: theme.shape.borderRadius,\n            cursor: 'pointer'\n        }\n    },\n    clicked: {\n        backgroundColor: red[500],\n        borderRadius: theme.shape.borderRadius\n    }\n}));\n\n/**\n * Callback for events handling.\n * @callback EventHandler\n */\n\n/**\n * Function with validation rule.\n * @callback ValidationFunction\n * @param {string} value - Value to validate.\n * @returns {boolean} - Indicates whether value is valid.\n */\n\n/**\n * Renders FormItemsRow with [FormFields]{@link FormField}.\n * @param {Object}             props\n * @param {boolean}            props.isClicked  - Indicates whether the FormItemsRow is clicked.\n * @param {boolean}            props.isDisabled - Indicates whether fields of the FormItemsRow are disabled.\n * @param {string}             props.name       - Name of the FormItemsRow in the Form.\n * @param {EventHandler}       props.onRowClick - On FormItemsRow Click handler.\n * @param {ValidationFunction} props.onValidate - Field validation function.\n */\nconst FormItemsRow = ({\n    isClicked,\n    isDisabled,\n    name,\n    onRowClick,\n    onValidate\n}) => {\n    const classes  = useStyles();\n    const smScreen = useMediaQuery(theme => theme.breakpoints.down('sm'));\n\n    return (\n        <Grid\n            role='gridcell'\n            className={cn({\n                [classes.row]: isDisabled,\n                [classes.clicked]: isClicked\n            })}\n            container item\n            justify='center'\n            onClick={onRowClick}\n            spacing={smScreen ? 1 : 2}\n            xs={11} sm={6} md={11}\n        >\n            <Grid item xs={12} md={4}>\n                <FormField\n                    disabled={isDisabled}\n                    label='Name'\n                    name={`${name}.name`}\n                    validate={onValidate}\n                />\n            </Grid>\n            <Grid item xs={12} md={4}>\n                <FormField\n                    disabled={isDisabled}\n                    label='Quantity'\n                    name={`${name}.quantity`}\n                    validate={onValidate}\n                />\n            </Grid>\n            <Grid item xs={12} md={4}>\n                <FormField\n                    disabled={isDisabled}\n                    label='Time'\n                    name={`${name}.time`}\n                />\n            </Grid>\n        </Grid>\n    );\n};\n\nFormItemsRow.propTypes = {\n    isClicked:  PropTypes.bool.isRequired,\n    isDisabled: PropTypes.bool.isRequired,\n    name:       PropTypes.string.isRequired,\n    onRowClick: PropTypes.func.isRequired,\n    onValidate: PropTypes.func.isRequired\n};\n\nexport default FormItemsRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FieldArray } from 'react-final-form-arrays';\n\nimport FormItemsRow from './FormItemsRow/FormItemsRow';\n\n/**\n * Function with validation rule.\n * @callback ValidationFunction\n * @param {string} value - Value to validate.\n * @returns {boolean} - Indicates whether value is valid.\n */\n\n/**\n * Renders Schema's items in the table-like style with the help of the [FieldArray]{@link https://github.com/final-form/react-final-form-arrays#fieldarray--reactcomponenttypefieldarrayprops} and [FormField]{@link FormField}.\n * @param {Object}             props\n * @param {Object[]}           props.initItems          - Initial values of the schema's items.\n * @param {string}             props.initItems.id       - Initial item id.\n * @param {string}             props.initItems.name     - Initial item name.\n * @param {string}             props.initItems.quantity - Initial item quantity.\n * @param {string}             props.initItems.time     - Initial item time.\n * @param {boolean}            props.isRemoveClicked    - Indicates whether Remove button is clicked.\n * @param {number[]}           props.itemsIdsToRemove   - Array of items ids to remove from the form.\n * @param {Function}           props.onItemsRowClick    - On item row click function.\n * @param {ValidationFunction} props.onValidate         - Field validation function.\n */\nconst FormItems = ({\n    initItems,\n    isRemoveClicked,\n    itemsIdsToRemove,\n    onItemsRowClick,\n    onValidate\n}) => {\n    const onRowClick = id => () => onItemsRowClick(id);\n\n    return (\n        <FieldArray\n            name='items'\n            initialValue={initItems}\n            render={({ fields }) => fields.map((name, index) => (\n                <FormItemsRow\n                    key={index}\n                    isClicked={itemsIdsToRemove.indexOf(index) !== -1}\n                    isDisabled={isRemoveClicked}\n                    name={name}\n                    onRowClick={onRowClick(index)}\n                    onValidate={onValidate}\n                />\n            ))}\n        />\n    );\n};\n\nFormItems.propTypes = {\n    initItems: PropTypes.arrayOf(PropTypes.shape({\n        id:       PropTypes.string.isRequired,\n        name:     PropTypes.string.isRequired,\n        quantity: PropTypes.string.isRequired,\n        time:     PropTypes.string.isRequired\n    })).isRequired,\n    isRemoveClicked:  PropTypes.bool.isRequired,\n    itemsIdsToRemove: PropTypes.arrayOf(PropTypes.number).isRequired,\n    onItemsRowClick:  PropTypes.func.isRequired,\n    onValidate:       PropTypes.func.isRequired\n};\n\nexport default FormItems;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CustomButton from 'components/Common/CustomButton';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexDirection: 'column',\n        [theme.breakpoints.down('sm')]: {\n            flexDirection: 'row',\n            margin: '0 auto'\n        }\n    }\n}));\n\n/**\n * Callback for events handling.\n * @callback EventHandler\n */\n\n/**\n * Renders [CustomButtons]{@link CustomButton} as form buttons.\n * @param {Object}       props\n * @param {Object}       props.submit            - Props for the Submit CustomButton.\n * @param {boolean}      props.submit.isDisabled - Indicates whether CustomButton is disabled.\n * @param {EventHandler} props.submit.onClick    - On click function for Submit CustomButton.\n * @param {Object}       props.reset             - Props for the Reset CustomButton.\n * @param {boolean}      props.reset.isDisabled  - Indicates whether CustomButton is disabled.\n * @param {EventHandler} props.reset.onClick     - On click function for Reset CustomButton.\n * @param {Object}       props.cancel            - Props for the Cancel CustomButton.\n * @param {boolean}      props.cancel.isDisabled - Indicates whether CustomButton is disabled.\n * @param {EventHandler} props.cancel.onClick    - On click function for Cancel CustomButton.\n */\nconst FormButtons = ({ submit, reset, cancel }) => {\n    const classes = useStyles();\n\n    return (\n        <Box\n            className={classes.root}\n            display='flex'\n            role='tablist'\n        >\n            <CustomButton\n                themeColor='green'\n                onClick={submit.onClick}\n                text='Submit'\n                type={submit.isDisabled ? 'disabled' : 'shown'}\n            />\n            <CustomButton\n                themeColor='yellow'\n                onClick={reset.onClick}\n                text='Reset'\n                type={reset.isDisabled ? 'disabled' : 'shown'}\n            />\n            <CustomButton\n                themeColor='red'\n                onClick={cancel.onClick}\n                text='Cancel'\n                type={cancel.isDisabled ? 'disabled' : 'shown'}\n            />\n        </Box>\n    );\n};\n\nFormButtons.propTypes = {\n    submit: PropTypes.shape({\n        isDisabled: PropTypes.bool.isRequired,\n        onClick:    PropTypes.func.isRequired\n    }).isRequired,\n    reset: PropTypes.shape({\n        isDisabled: PropTypes.bool.isRequired,\n        onClick:    PropTypes.func.isRequired\n    }).isRequired,\n    cancel: PropTypes.shape({\n        isDisabled: PropTypes.bool.isRequired,\n        onClick:    PropTypes.func.isRequired\n    }).isRequired\n};\n\nexport default FormButtons;\n","import { useState } from 'react';\n\nconst useRemoveItems = () => {\n    const [isRemoveClicked, setIsRemoveClicked] = useState(false);\n    const [itemsIdsToRemove, setItemsIdsToRemove] = useState([]);\n    const [isRemoveAllClicked, setIsRemoveAllClicked] = useState(false);\n\n    const removeOnClick = removeBatch => {\n        if (isRemoveClicked && itemsIdsToRemove.length) {\n            removeBatch('items', itemsIdsToRemove);\n            setItemsIdsToRemove([]);\n            setIsRemoveAllClicked(false);\n        }\n        setIsRemoveClicked(!isRemoveClicked);\n    };\n\n    const removeAllOnClick = items => {\n        if (isRemoveAllClicked) {\n            setItemsIdsToRemove([]);\n        } else {\n            setItemsIdsToRemove([...items.keys()]);\n        }\n        setIsRemoveAllClicked(!isRemoveAllClicked);\n    };\n\n    const onItemsRowClick = items => index => {\n        if (isRemoveClicked) {\n            let newItemsIdsToRemove = [...itemsIdsToRemove];\n\n            if (itemsIdsToRemove.indexOf(index) !== -1) {\n                newItemsIdsToRemove = itemsIdsToRemove.filter((id) => id !== index);\n            } else {\n                newItemsIdsToRemove = itemsIdsToRemove.concat(index);\n            }\n\n            setItemsIdsToRemove(newItemsIdsToRemove);\n            setIsRemoveAllClicked(items.length === newItemsIdsToRemove.length);\n        }\n    };\n\n    return [\n        { isRemoveClicked, isRemoveAllClicked, itemsIdsToRemove },\n        { removeOnClick, removeAllOnClick, onItemsRowClick }\n    ];\n};\n\nexport default useRemoveItems;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from '@reduxjs/toolkit';\n\nimport { Form }      from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\n\nimport FormField         from './FormField/FormField';\nimport FormItemsControls from './FormItemsControls/FormItemsControls';\nimport FormItems         from './FormItems/FormItems';\nimport FormButtons       from './FormButtons/FormButtons';\nimport useRemoveItems    from './utils/useRemoveItems';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box            from '@material-ui/core/Box';\nimport Grid           from '@material-ui/core/Grid';\nimport useMediaQuery  from '@material-ui/core/useMediaQuery';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexDirection: 'row',\n        [theme.breakpoints.down('sm')]: {\n            flexDirection: 'column'\n        }\n    },\n    bar: {\n        flexDirection: 'column',\n        backgroundColor: theme.palette.background.default,\n        [theme.breakpoints.down('sm')]: {\n            flexDirection: 'row',\n            marginBottom: theme.spacing(2)\n        }\n    },\n    form: {\n        width: '100%'\n    }\n}));\n\n/**\n * Callback for events handling.\n * @callback EventHandler\n */\n\n/**\n * Form container to add or edit schemas.\n * [React Final Form]{@link https://final-form.org/react} library is used.\n * @param {Object}       props\n * @param {Object}       props.schema                - Initial data for the form.\n * @param {string}       [props.schema.id]           - Schema id.\n * @param {string}       props.schema.name           - Schema name.\n * @param {string}       props.schema.description    - Schema description.\n * @param {Object[]}     props.schema.items          - Array of schema items.\n * @param {string}       props.schema.items.id       - Schema item id.\n * @param {string}       props.schema.items.name     - Schema item name.\n * @param {string}       props.schema.items.quantity - Schema item quantity.\n * @param {string}       props.schema.items.time     - Schema item time.\n * @param {EventHandler} props.onSubmit              - On click function for Submit Button.\n * @param {EventHandler} props.onCancel              - On click function for Cancel Button.\n */\nconst SchemaForm = ({ schema, onSubmit, onCancel }) => {\n    const classes = useStyles();\n    const xsScreen = useMediaQuery(theme => theme.breakpoints.down('xs'));\n\n    const [\n        { isRemoveClicked, isRemoveAllClicked, itemsIdsToRemove },\n        { removeOnClick, removeAllOnClick, onItemsRowClick }\n    ] = useRemoveItems();\n\n    const addOnClick = push => {\n        push(\n            'items',\n            { id: nanoid(), name: '', quantity: '', time: '' }\n        );\n    };\n\n    const required = value => !value;\n\n    return (\n        <Form\n            onSubmit={onSubmit}\n            initialValues={schema}\n            mutators={{...arrayMutators}}\n            render={({\n                handleSubmit,\n                form: { mutators: { push, removeBatch }, submit, reset },\n                submitting,\n                dirty,\n                initialValues,\n                values\n            }) => (\n                <Box\n                    className={classes.root}\n                    display='flex'\n                >\n                    <Box position='sticky' top={0} zIndex='appBar'>\n                        <Box position='sticky' top={0}>\n                            <Box\n                                className={classes.bar}\n                                display='flex'\n                                flexWrap='wrap'\n                            >\n                                <FormButtons\n                                    submit={({\n                                        isDisabled: isRemoveClicked || submitting,\n                                        onClick: submit\n                                    })}\n                                    reset={({\n                                        isDisabled: isRemoveClicked || submitting || !dirty,\n                                        onClick: reset\n                                    })}\n                                    cancel={({\n                                        isDisabled: isRemoveClicked || submitting,\n                                        onClick: onCancel\n                                    })}\n                                />\n                                <FormItemsControls\n                                    isRemoveClicked={isRemoveClicked}\n                                    showRemove={!!values.items.length}\n                                    isRemoveAllClicked={isRemoveAllClicked}\n                                    addOnClick={() => addOnClick(push)}\n                                    removeOnClick={() => removeOnClick(removeBatch)}\n                                    removeAllOnClick={() => removeAllOnClick(values.items)}\n                                />\n                            </Box>\n                        </Box>\n                    </Box>\n                    <form className={classes.form} onSubmit={handleSubmit} role='table'>\n                        <Grid\n                            alignContent='center'\n                            container\n                            justify='center'\n                            spacing={xsScreen ? 2 : 3}\n                        >\n                            <Grid item xs={7}>\n                                <FormField\n                                    disabled={isRemoveClicked}\n                                    label='Schema Name'\n                                    name='name'\n                                    validate={required}\n                                />\n                            </Grid>\n                            <Grid item xs={11} sm={10} md={9}>\n                                <FormField\n                                    disabled={isRemoveClicked}\n                                    label='Schema Description'\n                                    multiline\n                                    name='description'\n                                    rows={2}\n                                />\n                            </Grid>\n                            <FormItems\n                                initItems={initialValues.items}\n                                isRemoveClicked={isRemoveClicked}\n                                itemsIdsToRemove={itemsIdsToRemove}\n                                onItemsRowClick={onItemsRowClick(values.items)}\n                                onValidate={required}\n                            />\n                        </Grid>\n                    </form>\n                </Box>\n            )}\n        />\n    );\n};\n\nSchemaForm.propTypes = {\n    schema: PropTypes.shape({\n        id:          PropTypes.string,\n        name:        PropTypes.string.isRequired,\n        description: PropTypes.string.isRequired,\n        items: PropTypes.arrayOf(PropTypes.shape({\n            id:       PropTypes.string.isRequired,\n            name:     PropTypes.string.isRequired,\n            quantity: PropTypes.string.isRequired,\n            time:     PropTypes.string.isRequired\n        })).isRequired\n    }).isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired\n};\n\nexport default SchemaForm;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport CustomPrimaryThemeProvider from 'components/Common/CustomPrimaryThemeProvider/CustomPrimaryThemeProvider';\nimport SchemaForm from 'components/Schemas/SchemaForm/SchemaForm';\n\nimport { addSchema } from 'redux/reducers/schemas';\nimport { setMode, UiModes } from 'redux/reducers/ui';\n\n/**\n * Component to add new schema with [SchemaForm]{@link SchemaForm}.\n */\nconst AddSchemaForm = () => {\n    const dispatch = useDispatch();\n\n    const schema = {\n        name: '',\n        description: '',\n        items: []\n    };\n\n    const onSubmit = schema => dispatch(addSchema(schema));\n    const onCancel = () => dispatch(setMode(UiModes.SHOW));\n\n    return (\n        <CustomPrimaryThemeProvider themeColor='green'>\n            <SchemaForm\n                schema={schema}\n                onSubmit={onSubmit}\n                onCancel={onCancel}\n            />\n        </CustomPrimaryThemeProvider>\n    );\n};\n\nexport default AddSchemaForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport CustomPrimaryThemeProvider from 'components/Common/CustomPrimaryThemeProvider/CustomPrimaryThemeProvider';\nimport SchemaForm from 'components/Schemas/SchemaForm/SchemaForm';\n\nimport { selectSchemaById, updateSchema } from 'redux/reducers/schemas';\nimport { setActiveSchemaId } from 'redux/reducers/ui';\n\n/**\n * Component to edit schema with [SchemaForm]{@link SchemaForm}.\n * @param {Object} props\n * @param {string} props.id - Schema id.\n */\nconst EditSchemaForm = ({ id }) => {\n    const schema   = useSelector(selectSchemaById(id));\n    const dispatch = useDispatch();\n\n    const onSubmit = schema => dispatch(updateSchema(schema));\n    const onCancel = () => dispatch(setActiveSchemaId(null));\n\n    return (\n        <CustomPrimaryThemeProvider themeColor='yellow'>\n            <SchemaForm\n                schema={schema}\n                onSubmit={onSubmit}\n                onCancel={onCancel}\n            />\n        </CustomPrimaryThemeProvider>\n    );\n};\n\nEditSchemaForm.propTypes = {\n    id: PropTypes.string.isRequired\n};\n\nexport default EditSchemaForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card           from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardHeader     from '@material-ui/core/CardHeader';\nimport CardContent    from '@material-ui/core/CardContent';\nimport Typography     from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        textAlign: 'center',\n        padding: theme.spacing(3),\n        width: 200,\n        height: 250,\n        [theme.breakpoints.down('sm')]: {\n            padding: theme.spacing(2),\n            width: 180,\n            height: 230,\n        },\n        [theme.breakpoints.down('xs')]: {\n            padding: theme.spacing(1),\n            width: 160,\n            height: 205\n        }\n    },\n    actionArea: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        alignItems: 'inherit',\n        height: '100%',\n        borderRadius: theme.shape.borderRadius\n    },\n    highlight: {\n        backgroundColor: theme.palette.primary.main\n    },\n    header: {\n        padding: 0\n    },\n    content: {\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        padding: 0\n    },\n    subheader: {\n        color: ({ isClicked }) => isClicked ? theme.palette.primary.main : null\n    }\n}));\n\n/**\n * Callback for events handling.\n * @callback EventHandler\n */\n\n/**\n * Functional component which renders a custom CustomCard element.\n * @param {Object}       props\n * @param {*}            props.content     - Content of the CustomCard.\n * @param {boolean}      [props.isClicked] - Indicates whether the CustomCard is clicked.\n * @param {string}       props.name        - Name of the CustomCard.\n * @param {EventHandler} [props.onClick]   - On click function for the CustomCard.\n */\nconst CustomCard = ({\n    content,\n    isClicked = false,\n    name,\n    onClick = null\n}) => {\n    const classes = useStyles({ isClicked });\n\n    let cardContent = (\n        <>\n            <CardHeader\n                classes={{\n                    root: classes.header,\n                    subheader: classes.subheader\n                }}\n                subheader={name}\n            />\n            <div><hr /></div>\n            <CardContent className={classes.content}>\n                <Typography component='div'>\n                    {content}\n                </Typography>\n            </CardContent>\n        </>\n    );\n\n    if (!isClicked) {\n        cardContent = (\n            <CardActionArea\n                classes={{\n                    root: classes.actionArea,\n                    focusHighlight: classes.highlight\n                }}\n                onClick={onClick}\n            >\n                {cardContent}\n            </CardActionArea>\n        );\n    }\n\n    return (\n        <Card className={classes.root} role='button' elevation={isClicked ? 5 : 3}>\n            {cardContent}\n        </Card>\n    );\n};\n\nCustomCard.propTypes = {\n    content:    PropTypes.node.isRequired,\n    isClicked:  PropTypes.bool,\n    name:       PropTypes.string.isRequired,\n    onClick:    PropTypes.func\n};\n\nexport default CustomCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CustomPrimaryThemeProvider from 'components/Common/CustomPrimaryThemeProvider/CustomPrimaryThemeProvider';\nimport CustomCard from './CustomCard';\n\n/**\n * Callback for events handling.\n * @callback EventHandler\n */\n\n/**\n * Wraps CustomCard with custom theme.\n * @param {Object}         props\n * @param {'yellow'|'red'} [props.themeColor] - A color of the theme of the CustomCard.\n * @param {*}              props.content      - Content of the CustomCard.\n * @param {boolean}        [props.isClicked]  - Indicates whether the CustomCard is clicked.\n * @param {string}         props.name         - Name of the CustomCard.\n * @param {EventHandler}   [props.onClick]    - On click function for the CustomCard.\n */\nconst CustomCardContainer = ({ themeColor = null, ...restProps }) => (\n    <CustomPrimaryThemeProvider themeColor={themeColor}>\n        <CustomCard {...restProps} />\n    </CustomPrimaryThemeProvider>\n);\n\nCustomCardContainer.propTypes = {\n    themeColor: PropTypes.oneOf(['yellow', 'red']),\n    content:    PropTypes.node.isRequired,\n    isClicked:  PropTypes.bool,\n    name:       PropTypes.string.isRequired,\n    onClick:    PropTypes.func\n};\n\nexport default CustomCardContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport CustomCard from 'components/Common/CustomCard';\n\nimport { selectSchemaById }  from 'redux/reducers/schemas';\nimport { setActiveSchemaId } from 'redux/reducers/ui';\n\n/**\n * Component to select a specified schema from the store for [CustomCard]{@link CustomCard}.\n * @param {Object}         props\n * @param {string}         props.id           - Schema id\n * @param {'yellow'|'red'} [props.themeColor] - A color of the theme of the CustomCard.\n */\nconst CustomCardGridItem = ({ id, themeColor = null }) => {\n    const schema   = useSelector(selectSchemaById(id));\n    const dispatch = useDispatch();\n\n    const onClick = id => () => dispatch(setActiveSchemaId(id));\n\n    return (\n        <CustomCard\n            themeColor={themeColor}\n            content={schema.items.map(item => <div key={item.id}>{item.name}</div>)}\n            name={schema.name}\n            onClick={onClick(schema.id)}\n        />\n    );\n};\n\nCustomCardGridItem.propTypes = {\n    id:         PropTypes.string.isRequired,\n    themeColor: PropTypes.oneOf(['yellow', 'red'])\n};\n\nexport default CustomCardGridItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CustomCard   from '.';\nimport CustomButton from 'components/Common/CustomButton';\n\nimport Box from '@material-ui/core/Box';\n\n/**\n * Callback for events handling.\n * @callback EventHandler\n */\n\n/**\n * Functional component which wraps the [CustomCard]{@link CustomCard} element.\n * When it is clicked, CustomCardButtons passes into the [CustomCard]{@link CustomCard} two clickable [CustomButtons]{@link CustomButton} as the content.\n * @param {Object}       props\n * @param {Object}       props.buttons                - Props of the CustomButton to display as the Card's content.\n * @param {Object}       props.buttons.first          - The first CustomButton's props.\n * @param {EventHandler} props.buttons.first.onClick  - On click function for the first CustomButton.\n * @param {string}       props.buttons.first.text     - Text to display on the first CustomButton.\n * @param {Object}       props.buttons.second         - The second CustomButton's props.\n * @param {EventHandler} props.buttons.second.onClick - On click function for the second CustomButton.\n * @param {string}       props.buttons.second.text    - Text to display on the second CustomButton.\n *\n * @param {boolean}      [props.isCardClicked]        - If CustomCard is clicked, then CustomCard onClick will be nullified and two CustomButton will be displayed instead of the content prop.\n * @param {*}            props.content                - Content of the CustomCard.\n * @param {string}       props.name                   - Name of the CustomCard.\n * @param {EventHandler} [props.onClick]              - On click function for the CustomCard.\n */\nconst CustomCardButtons = ({\n    buttons: { first, second },\n    isCardClicked = false,\n    content,\n    name,\n    onClick\n}) => {\n    if (isCardClicked) {\n        onClick = null;\n        content = (\n            <Box display='flex' flexDirection='column'>\n                <CustomButton\n                    themeColor='red'\n                    onClick={first.onClick}\n                    text={first.text}\n                />\n                <CustomButton\n                    onClick={second.onClick}\n                    text={second.text}\n                />\n            </Box>\n        );\n    }\n\n    return (\n        <CustomCard\n            themeColor='red'\n            content={content}\n            isClicked={isCardClicked}\n            name={name}\n            onClick={onClick}\n        />\n    );\n};\n\nCustomCardButtons.propTypes = {\n    buttons: PropTypes.shape({\n        first: PropTypes.shape({\n            onClick: PropTypes.func.isRequired,\n            text: PropTypes.string.isRequired\n        }).isRequired,\n        second: PropTypes.shape({\n            onClick: PropTypes.func.isRequired,\n            text: PropTypes.string.isRequired\n        }).isRequired,\n    }).isRequired,\n    isCardClicked: PropTypes.bool,\n    content:       PropTypes.node.isRequired,\n    name:          PropTypes.string.isRequired,\n    onClick:       PropTypes.func\n};\n\nexport default CustomCardButtons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport CustomCardButtons from 'components/Common/CustomCard/CustomCardButtons';\n\nimport { selectSchemaById, deleteSchema } from 'redux/reducers/schemas';\nimport { setActiveSchemaId } from 'redux/reducers/ui';\n\n/**\n * Component to select a specified schema from the store for [CustomCardButtons]{@link CustomCardButtons}.\n * @param {Object}  props\n * @param {string}  props.id              - Schema id\n * @param {boolean} [props.isCardClicked] - Indicates whether the CustomCardButtons is clicked.\n */\nconst CustomCardButtonsGridItem = ({\n    id,\n    isCardClicked = false\n}) => {\n    const schema   = useSelector(selectSchemaById(id));\n    const dispatch = useDispatch();\n\n    const onDeleteClick = id => () => dispatch(deleteSchema(id));\n    const onCancelClick = () => dispatch(setActiveSchemaId(null));\n    const onCardClick   = id => () => dispatch(setActiveSchemaId(id));\n\n    return (\n        <CustomCardButtons\n            buttons={({\n                first: {\n                    onClick: onDeleteClick(schema.id),\n                    text: 'Delete'\n                },\n                second: {\n                    onClick: onCancelClick,\n                    text: 'Cancel'\n                }\n            })}\n            isCardClicked={isCardClicked}\n            content={schema.items.map(item => <div key={item.id}>{item.name}</div>)}\n            name={schema.name}\n            onClick={onCardClick(schema.id)}\n        />\n    );\n};\n\nCustomCardButtonsGridItem.propTypes = {\n    id:            PropTypes.string.isRequired,\n    isCardClicked: PropTypes.bool\n};\n\nexport default CustomCardButtonsGridItem;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Schema                    from '../Schema/Schema';\nimport SchemasGrid               from '../SchemasGrid/SchemasGrid';\nimport AddSchemaForm             from '../AddSchemaForm/AddSchemaForm';\nimport EditSchemaForm            from '../EditSchemaForm/EditSchemaForm';\nimport CustomCardGridItem        from '../CustomCardGridItem/CustomCardGridItem';\nimport CustomCardButtonsGridItem from '../CustomCardButtonsGridItem/CustomCardButtonsGridItem';\n\nimport {\n    UiModes,\n    selectActiveSchemaId,\n    selectMode\n} from 'redux/reducers/ui';\n\n/**\n * Component to display a list of all Schemas by [CustomCard]{@link CustomCard} or [CustomCardWithButtons]{@link CustomCardWithButtons} or a single selected [Schema]{@link Schema} or [SchemaForm]{@link SchemaForm}.\n * The displayed content depends on value of the activeSchemaId and mode parameters from the store.\n */\nconst SchemasBoard = () => {\n    const activeSchemaId = useSelector(selectActiveSchemaId);\n    const mode = useSelector(selectMode);\n\n    const isAdd    = mode === UiModes.ADD;\n    const isEdit   = mode === UiModes.EDIT;\n    const isDelete = mode === UiModes.DELETE;\n\n    let schemasBoard;\n\n    if (activeSchemaId) {\n        if (isEdit) {\n            schemasBoard = <EditSchemaForm id={activeSchemaId} />;\n        } else if (isDelete) {\n            schemasBoard = (\n                <SchemasGrid\n                    render={id => (\n                        <CustomCardButtonsGridItem\n                            id={id}\n                            isCardClicked={id === activeSchemaId}\n                            key={id}\n                        />\n                    )}\n                />\n            );\n        } else {\n            schemasBoard = <Schema id={activeSchemaId} />;\n        }\n    } else {\n        if (isAdd) {\n            schemasBoard = <AddSchemaForm />;\n        } else {\n            const cardThemeColor = (\n                isEdit ?\n                    'yellow'\n                : isDelete ?\n                    'red'\n                : null\n            );\n\n            schemasBoard = (\n                <SchemasGrid\n                    render={id => (\n                        <CustomCardGridItem\n                            id={id}\n                            themeColor={cardThemeColor}\n                            key={id}\n                        />\n                    )}\n                />\n            );\n        }\n    }\n\n    return schemasBoard;\n};\n\nexport default SchemasBoard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport SchemasBoard from 'components/Schemas/SchemasBoard/SchemasBoard';\n\nimport { Box } from '@material-ui/core';\n\n/**\n * Component for rendering the main part of the app.\n * @param {Object}  props\n * @param {boolean} props.isSchemasClicked - If true, [SchemasBoard]{@link SchemasBoard} will be rendered.\n */\nconst Content = ({ isSchemasClicked }) => (\n    <Box p={'2%'}>\n        {isSchemasClicked && <SchemasBoard />}\n    </Box>\n);\n\nContent.propTypes = {\n    isSchemasClicked: PropTypes.bool.isRequired\n};\n\nexport default Content;\n","import React, { useState } from 'react';\n\nimport Header  from 'components/Header';\nimport Content from 'components/Content/Content';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Box       from '@material-ui/core/Box';\n\nconst useStyles = makeStyles(theme => ({\n    rootContainer: {\n        backgroundColor: theme.palette.background.paper\n    },\n    gutters: {\n        [theme.breakpoints.down('xs')]: {\n          paddingLeft: 0,\n          paddingRight: 0\n        }\n    },\n    rootBox: {\n        minHeight: '100vh',\n        backgroundColor: theme.palette.background.default\n    }\n}));\n\n/**\n * A Dashboard component with Header and Content.\n */\nconst Dashboard = () => {\n    const classes = useStyles();\n\n    // TODO isSchemasClicked is set true while profile isn't available\n    const [isSchemasClicked, setIsSchemasClicked] = useState(true);\n\n    return (\n        <Container className={classes.rootContainer} maxWidth={false} disableGutters>\n            <Container className={classes.gutters}>\n                <Box display='flex' flexDirection='column' className={classes.rootBox}>\n                    <Header\n                        isSchemasClicked={isSchemasClicked}\n                        setIsSchemasClicked={setIsSchemasClicked}\n                    />\n                    <Content isSchemasClicked={isSchemasClicked} />\n                </Box>\n            </Container>\n        </Container>\n    );\n};\n\nexport default Dashboard;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport API from 'api';\nimport { loadSchemas } from 'redux/reducers/schemas';\nimport { selectDarkTheme } from 'redux/reducers/ui';\n\nimport Dashboard from 'components/Schemas/Dashboard/Dashboard';\n\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nconst App = () => {\n    const isDarkTheme = useSelector(selectDarkTheme);\n    const dispatch    = useDispatch();\n\n    const muiTheme = createMuiTheme({\n        palette: {\n            type: isDarkTheme ? 'dark' : 'light'\n        }\n    });\n\n    useEffect(() => {\n        // TODO demo profile\n        API.init('Profile 1');\n        dispatch(loadSchemas());\n    }, [dispatch]);\n\n    return (\n        <ThemeProvider theme={muiTheme}>\n            <CssBaseline />\n            <Dashboard />\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport profile from './profile';\nimport schemas from './schemas';\nimport ui      from './ui';\n\nconst reducer = combineReducers({\n    // profile,\n    schemas,\n    ui\n});\n\nexport default reducer;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport 'index.css';\nimport App from 'App';\n\nimport configureAppStore from 'redux/store/configureAppStore';\n\nconst store = configureAppStore();\n\nconst renderApp = () => {\n    render(\n        <React.StrictMode>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n};\n\nif (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./App', renderApp);\n}\n\nrenderApp();\n","import { configureStore } from '@reduxjs/toolkit';\nimport API from 'api';\n\nimport reducer from 'redux/reducers';\n\nexport default function configureAppStore(preloadedState) {\n    const store = configureStore({\n        reducer,\n        preloadedState,\n        middleware: getDefaultMiddleware => (\n            getDefaultMiddleware({\n                thunk: {\n                    extraArgument: API,\n                }\n            })\n        )\n    });\n\n    if (process.env.NODE_ENV !== 'production' && module.hot) {\n        module.hot.accept('../reducers', () => store.replaceReducer(reducer));\n    }\n\n    return store;\n}\n"],"sourceRoot":""}