{"version":3,"sources":["components/Common/CustomButton/CustomButton.js","redux/reducers/ui.js","api/index.js","redux/reducers/schemas.js","components/SchemasList/SchemasListContainer.js","components/SchemasPanel/SchemasPanelContainer.js","components/Header/HeaderContainer.js","components/Common/CustomCard/CustomCard.js","components/Common/CustomCard/CustomCardWithButtons.js","components/Schema/Schema.js","components/SchemaForm/FormField/FormField.js","components/SchemaForm/FormItemsControls/FormItemsControls.js","components/SchemaForm/FormItems/FormItemsRow/FormItemsRow.js","components/SchemaForm/FormItems/FormItems.js","components/SchemaForm/FormButtons/FormButtons.js","components/SchemaForm/utils/useRemoveItems.js","components/SchemaForm/SchemaFormContainer.js","components/SchemasBoard/SchemasBoardContainer.js","components/Content/ContentContainer.js","App.js","redux/reducers/index.js","index.js","redux/store/configureStore.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","breakpoints","down","outlined","backgroundColor","palette","background","paper","clicked","color","cursor","CustomButton","colorTheme","type","onClick","text","isClicked","isToggled","isDisabled","currentTheme","createMuiTheme","primary","main","green","yellow","contrastText","red","getColor","classes","xxsScreen","useMediaQuery","xsScreen","isColorNotDefault","includes","button","Button","cn","disabled","disableElevation","disableFocusRipple","disableRipple","size","variant","ThemeProvider","UiModes","selectSchema","id","payload","setMode","mode","ui","state","selectedSchemaId","action","API","key","init","this","saveData","data","localStorage","setItem","JSON","stringify","loadData","parse","getItem","schemas","addSchema","schema","length","push","Promise","resolve","updateSchema","updateId","findIndex","deleteSchema","filter","addSchemaSuccess","updateSchemaSuccess","deleteSchemaSuccess","selectSchemasForSchemasList","createSelector","map","name","getSchemasCount","connect","Tabs","value","onChange","event","newId","indicatorColor","Tab","label","schemasCount","isAdd","isEdit","isDelete","handleClick","newMode","Box","display","mx","my","toolbar","flexWrap","isWrap","justifyContent","padding","paddingLeft","paddingRight","isSchemasClicked","setIsSchemasClicked","isShowSchema","AppBar","position","Toolbar","className","SchemasListContainer","SchemasPanelContainer","textAlign","width","height","actionArea","flexDirection","alignItems","borderRadius","shape","highlight","header","content","overflow","whiteSpace","subheader","CustomCard","cardContent","CardHeader","CardContent","Typography","component","CardActionArea","focusHighlight","Card","role","CustomCardWithButtons","buttons","first","second","cardIsClicked","Schema","smScreen","Grid","alignContent","container","justify","item","xs","Paper","description","sm","md","items","quantity","time","textfield","FormField","multiline","placeholder","rows","validate","input","meta","TextField","error","touched","fullWidth","required","FormItemsControls","isRemoveClicked","showRemove","isRemoveAllClicked","addOnClick","removeOnClick","removeAllOnClick","row","FormItemsRow","onRowClick","onValidate","FormItems","initItems","itemsIdsToRemove","onItemsRowClick","initialValue","render","fields","index","indexOf","FormButtons","submit","reset","cancel","useRemoveItems","useState","setIsRemoveClicked","setItemsIdsToRemove","setIsRemoveAllClicked","removeBatch","keys","newItemsIdsToRemove","concat","bar","default","marginBottom","form","SchemaFormContainer","onSubmit","onCancel","initialValues","mutators","arrayMutators","handleSubmit","submitting","dirty","values","top","zIndex","rowGap","dispatch","a","response","schemasBoard","onClickResetSchema","selectClickedSchema","find","cardColorTheme","Content","p","SchemasBoardContainer","minHeight","grey","gutters","App","Container","HeaderContainer","ContentContainer","reducer","combineReducers","store","preloadedState","middlewares","thunk","logger","storeEnhancers","applyMiddleware","composedEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","configureStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d410469.chunk.js","sourcesContent":["import React from 'react';\nimport cn    from 'classnames';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button         from '@material-ui/core/Button';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport green          from '@material-ui/core/colors/green';\nimport yellow         from '@material-ui/core/colors/yellow';\nimport red            from '@material-ui/core/colors/red';\nimport useMediaQuery  from '@material-ui/core/useMediaQuery';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n        [theme.breakpoints.down(390)]: {\n            margin: theme.spacing(0.5)\n        }\n    },\n    outlined: {\n        backgroundColor: theme.palette.background.paper\n    },\n    clicked: {\n        '&:hover': {\n            backgroundColor: ({ color }) => color,\n            cursor: 'auto'\n        }\n    }\n}));\n\nconst getColor = (colorTheme, isDisabled) => {\n    const currentTheme = createMuiTheme();\n\n    return (\n        isDisabled ?\n            currentTheme.palette.primary\n        : (\n            colorTheme === 'green' ?\n                {main: green[600]}\n            : colorTheme === 'yellow' ?\n                {main: yellow[600], contrastText: '#fff'}\n            : colorTheme === 'red' ?\n                {main: red[600]}\n            : currentTheme.palette.primary\n        )\n    );\n};\n\n/**\n * Callback for events handling.\n * @callback EventHandlerFunction\n */\n\n/**\n * Functional component which renders a custom clickable or togglable button.\n * @param {Object}                                 props\n * @param {'green'|'yellow'|'red'|'default'}       [props.colorTheme] - Color theme of the CustomButton.\n * @param {'clicked'|'toggled'|'disabled'|'shown'} [props.type]       - Indicates a type of the CustomButton. If it's clicked, onClick is nullified; if it's toggled, the CustomButton is clicked and stayed clickable; if it's disabled, the CustomButton is disabled.\n * @param {EventHandlerFunction}                   props.onClick      - On click function for the CustomButton.\n * @param {string}                                 props.text         - Text to display on the CustomButton.\n */\nconst CustomButton = ({\n    colorTheme = 'default',\n    type = 'shown',\n    onClick,\n    text\n}) => {\n    const isClicked  = type === 'clicked';\n    const isToggled  = type === 'toggled';\n    const isDisabled = type === 'disabled';\n\n    const color     = getColor(colorTheme, isDisabled);\n    const classes   = useStyles({ color: color.main });\n    const xxsScreen = useMediaQuery(theme => theme.breakpoints.down(390));\n    const xsScreen  = useMediaQuery(theme => theme.breakpoints.down('xs'));\n    const isColorNotDefault = ['green', 'yellow', 'red'].includes(colorTheme);\n\n    let button = (\n        <Button\n            classes={{\n                root: cn({\n                    [classes.root]: true,\n                    [classes.clicked]: isClicked\n                }),\n                outlined: classes.outlined\n            }}\n            color={isColorNotDefault || isClicked ? 'primary' : 'default'}\n            disabled={isDisabled}\n            disableElevation={isClicked}\n            disableFocusRipple={isClicked}\n            disableRipple={isClicked}\n            onClick={isClicked ? null : onClick}\n            size={(\n                xxsScreen ?\n                    'small'\n                : xsScreen ?\n                    'medium'\n                : 'large'\n            )}\n            variant={isClicked || isToggled ? 'contained' : 'outlined'}\n        >\n            {text}\n        </Button>\n    );\n\n    if (isColorNotDefault && !isDisabled) {\n        button = (\n            <ThemeProvider theme={createMuiTheme({\n                palette: { primary: color }\n            })}>\n                {button}\n            </ThemeProvider>\n        );\n    }\n\n    return button;\n};\n\nexport default CustomButton;\n","const SELECT_SCHEMA  = 'ui/SELECT_SCHEMA';\nconst SET_MODE       = 'ui/SET_MODE';\n\n/**\n * Enum for the modes of the ui.\n * @enum {string}\n */\nexport const UiModes = {\n    SHOW: 'SHOW',\n    ADD: 'ADD',\n    EDIT: 'EDIT',\n    DELETE: 'DELETE'\n};\n\nconst ui = (\n    state = {\n        selectedSchemaId: null,\n        mode: UiModes.SHOW\n    },\n    action\n) => {\n    switch (action.type) {\n        case SELECT_SCHEMA:\n            return {...state, selectedSchemaId: action.payload.id};\n        case SET_MODE:\n            return {...state, mode: action.payload.mode};\n        default:\n            return state;\n    }\n};\n\nexport const selectSchema = (id) => ({type: SELECT_SCHEMA, payload: {id}});\nexport const setMode      = (mode) => ({type: SET_MODE, payload: {mode}});\n\nexport default ui;\n","const API = {\n    key: null,\n\n    init(key) {\n        this.key = key;\n    },\n    saveData(data) {\n        localStorage.setItem(this.key, JSON.stringify(data));\n    },\n    loadData() {\n        return JSON.parse(localStorage.getItem(this.key)) || {schemas: []};\n    },\n    addSchema(payload) {\n        const data = this.loadData();\n\n        payload.schema.id = data.schemas.length ? data.schemas[data.schemas.length - 1].id + 1 : 1;\n        data.schemas.push(payload.schema);\n\n        this.saveData(data);\n\n        return Promise.resolve({ data: data.schemas[data.schemas.length - 1] });\n    },\n    updateSchema(payload) {\n        const data = this.loadData();\n        const updateId = data.schemas.findIndex(schema => schema.id === payload.schema.id);\n\n        data.schemas[updateId] = payload.schema;\n\n        this.saveData(data);\n\n        return Promise.resolve({ data: data.schemas[updateId] });\n    },\n    deleteSchema(payload) {\n        const data = this.loadData();\n\n        data.schemas = data.schemas.filter(schema => schema.id !== payload.id);\n\n        this.saveData(data);\n\n        return Promise.resolve();\n    }\n};\n\nexport default API;\n","import { createSelector } from 'reselect';\n\nimport API from 'api';\n\nimport { selectSchema, setMode, UiModes } from './ui';\n\nconst ADD_SCHEMA    = 'schemas/ADD_SCHEMA';\nconst UPDATE_SCHEMA = 'schemas/UPDATE_SCHEMA';\nconst DELETE_SCHEMA = 'schemas/DELETE_SCHEMA';\n\nconst schemas = (state = [], action) => {\n    switch (action.type) {\n        case ADD_SCHEMA:\n            return [...state, action.payload.schema];\n        case UPDATE_SCHEMA:\n            return state.map((schema) => {\n                if (schema.id === action.payload.schema.id) {\n                    return action.payload.schema;\n                }\n\n                return schema;\n            });\n        case DELETE_SCHEMA:\n            return state.filter((schema) => schema.id !== action.payload.id);\n        default:\n            return state;\n    }\n};\n\nconst addSchemaSuccess = (schema) => ({type: ADD_SCHEMA, payload: {schema}});\nconst updateSchemaSuccess = (schema) => ({type: UPDATE_SCHEMA, payload: {schema}});\nconst deleteSchemaSuccess = (id) => ({type: DELETE_SCHEMA, payload: {id}});\n\n\nexport const addSchema = (schema) => async (dispatch) => {\n    const response = await API.addSchema({schema});\n\n    dispatch(addSchemaSuccess(response.data));\n    dispatch(setMode(UiModes.SHOW));\n};\nexport const updateSchema = (schema) => async (dispatch) => {\n    const response = await API.updateSchema({schema});\n\n    dispatch(updateSchemaSuccess(response.data));\n    dispatch(selectSchema(null));\n};\nexport const deleteSchema = (id) => async (dispatch) => {\n    await API.deleteSchema({id});\n\n    dispatch(deleteSchemaSuccess(id));\n    dispatch(selectSchema(null));\n};\n\n\nexport const selectSchemasForSchemasList = createSelector(\n    (state) => state.schemas,\n    (schemas) => schemas.map(({ id, name }) => ({ id, name }))\n);\nexport const getSchemasCount = createSelector(\n    (state) => state.schemas,\n    (schemas) => schemas.length\n);\n\nexport default schemas;\n","import React       from 'react';\nimport { connect } from 'react-redux';\n\nimport { selectSchema }                from 'redux/reducers/ui';\nimport { selectSchemasForSchemasList } from 'redux/reducers/schemas';\n\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab  from '@material-ui/core/Tab';\n\n/**\n * Renders a horizontal list of Schemas to choose.\n * @param {Object}      props\n * @param {Object[]}    props.schemas          - An array of ids and names of the all schemas from the Redux State.\n * @param {number}      props.schemas.id       - Schema id.\n * @param {string}      props.schemas.name     - Schema name.\n * @param {number|null} props.selectedSchemaId - The id of the selected schema from the Redux State.\n * @param {function}    props.selectSchema     - A function to select schema.\n */\nconst SchemasList = ({ schemas, selectedSchemaId, selectSchema }) => {\n    const handleChange = (event, newId) => {\n        selectSchema(newId);\n    }\n\n    return (\n        <Tabs\n            value={selectedSchemaId}\n            onChange={handleChange}\n            variant='scrollable'\n            indicatorColor='primary'\n        >\n            {schemas.map((schema) => (\n                <Tab key={schema.id} value={schema.id} label={schema.name} />\n            ))}\n        </Tabs>\n    );\n};\n\nexport default connect(\n    (state) => ({\n        schemas: selectSchemasForSchemasList(state),\n        selectedSchemaId: state.ui.selectedSchemaId\n    }),\n    { selectSchema }\n)(SchemasList);\n","import React       from 'react';\nimport { connect } from 'react-redux';\n\nimport CustomButton from 'components/Common/CustomButton/CustomButton';\n\nimport { setMode, UiModes} from 'redux/reducers/ui';\nimport { getSchemasCount } from 'redux/reducers/schemas';\n\nimport Box from '@material-ui/core/Box';\n\n/**\n * Renders a control panel of [Buttons]{@link CustomButton} to set a mode of the ui.\n * @param {Object}      props\n * @param {string}      props.mode             - The current ui mode from the Redux State.\n * @param {number}      props.schemasCount     - The number of existing schemas.\n * @param {number|null} props.selectedSchemaId - The id of the selected schema from the Redux State.\n * @param {function}    props.setMode          - A function to set current ui mode.\n */\nconst SchemasPanel = ({\n    mode,\n    schemasCount,\n    selectedSchemaId,\n    setMode\n}) => {\n    const isAdd    = mode === UiModes.ADD;\n    const isEdit   = mode === UiModes.EDIT;\n    const isDelete = mode === UiModes.DELETE;\n\n    const handleAddClick = () => setMode(UiModes.ADD);\n    const handleEditClick = () => handleClick(UiModes.EDIT);\n    const handleDeleteClick = () => handleClick(UiModes.DELETE);\n\n    const handleClick = (newMode) => {\n        if ((isEdit || isDelete) && mode === newMode && !selectedSchemaId) {\n            setMode(UiModes.SHOW);\n        } else {\n            setMode(newMode);\n        }\n    }\n\n    return (\n        <Box display='flex' mx='auto' my={0}>\n            <CustomButton\n                colorTheme='green'\n                onClick={handleAddClick}\n                text='Add'\n                type={(\n                    isAdd ?\n                        'clicked'\n                    : (selectedSchemaId && (isEdit || isDelete)) ?\n                        'disabled'\n                    : 'shown'\n                )}\n            />\n            {schemasCount\n                ? <>\n                    <CustomButton\n                        colorTheme='yellow'\n                        onClick={handleEditClick}\n                        text='Edit'\n                        type={(\n                            (isEdit && selectedSchemaId) ?\n                                'clicked'\n                            : isEdit ?\n                                'toggled'\n                            : (isAdd || (selectedSchemaId && isDelete)) ?\n                                'disabled'\n                            : 'shown'\n                        )}\n                    />\n                    <CustomButton\n                        colorTheme='red'\n                        onClick={handleDeleteClick}\n                        text='Delete'\n                        type={(\n                            (isDelete && selectedSchemaId) ?\n                                'clicked'\n                            : isDelete ?\n                                'toggled'\n                            : (isAdd || (selectedSchemaId && isEdit)) ?\n                                'disabled'\n                            : 'shown'\n                        )}\n                    />\n                </>\n            : null}\n        </Box>\n    );\n};\n\nexport default connect(\n    (state) => ({\n        mode: state.ui.mode,\n        schemasCount: getSchemasCount(state),\n        selectedSchemaId: state.ui.selectedSchemaId\n    }),\n    { setMode }\n)(SchemasPanel);\n","import React       from 'react';\nimport { connect } from 'react-redux';\n\nimport CustomButton          from 'components/Common/CustomButton/CustomButton';\nimport SchemasListContainer  from 'components/SchemasList/SchemasListContainer';\nimport SchemasPanelContainer from 'components/SchemasPanel/SchemasPanelContainer';\n\nimport { selectSchema, UiModes } from 'redux/reducers/ui';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar         from '@material-ui/core/AppBar';\nimport Toolbar        from '@material-ui/core/Toolbar';\n\nconst useStyles = makeStyles((theme) => ({\n    toolbar: {\n        flexWrap: ({ isWrap }) => isWrap ? 'wrap' : 'nowrap',\n        justifyContent: 'space-between',\n        padding: theme.spacing(1),\n        [theme.breakpoints.down('xs')]: {\n          paddingLeft: 0,\n          paddingRight: 0\n        }\n    },\n    button: {\n        margin: theme.spacing(1)\n    }\n}));\n\n/**\n * Header component with control buttons.\n * Consists of two parts - a clickable [CustomButton]{@link CustomButton} and a panel to display either the [SchemasList]{@link SchemasList} or the control [SchemasPanel]{@link SchemasPanel}.\n * @param {Object}      props\n * @param {boolean}     props.isSchemasClicked    - Indicates whether the Schemas button is clicked.\n * @param {string}      props.mode                - The current ui mode from the Redux State.\n * @param {number|null} props.selectedSchemaId    - The id of the selected schema from the Redux State.\n * @param {function}    props.selectSchema        - The dispatch function to select schema.\n * @param {function}    props.setIsSchemasClicked - Set value of the isSchemasClicked.\n */\nconst Header = ({\n    isSchemasClicked,\n    mode,\n    // profile,\n    selectedSchemaId,\n    selectSchema,\n    setIsSchemasClicked\n}) => {\n    const isShowSchema = selectedSchemaId && mode === UiModes.SHOW;\n    const classes = useStyles({ isWrap: !isShowSchema && isSchemasClicked });\n\n    const handleBackClick = () => selectSchema(null);\n    const handleSchemasClick = () => setIsSchemasClicked(true);\n\n    return (\n        <AppBar\n            color='inherit'\n            position={(\n                mode === UiModes.ADD || (selectedSchemaId && mode === UiModes.EDIT) ?\n                    'static'\n                : 'sticky'\n            )}\n        >\n            <Toolbar className={classes.toolbar}>\n                {isShowSchema ?\n                    <CustomButton\n                        onClick={handleBackClick}\n                        text='Back'\n                    />\n                : <CustomButton\n                    onClick={handleSchemasClick}\n                    text='Schemas'\n                    type={isSchemasClicked ? 'clicked' : 'shown'}\n                />}\n                {isShowSchema ?\n                    <SchemasListContainer />\n                : isSchemasClicked ?\n                    <SchemasPanelContainer />\n                : <div />}\n                {/* TODO <Plate text={profile.name} onClick={() => setContent(profile)} /> */}\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default connect(\n    (state) => ({\n        selectedSchemaId: state.ui.selectedSchemaId,\n        mode: state.ui.mode,\n        // profile: state.profile\n    }),\n    { selectSchema }\n)(Header);\n","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card           from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardHeader     from '@material-ui/core/CardHeader';\nimport CardContent    from '@material-ui/core/CardContent';\nimport Typography     from '@material-ui/core/Typography';\nimport yellow         from '@material-ui/core/colors/yellow';\nimport red            from '@material-ui/core/colors/red';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        textAlign: 'center',\n        padding: theme.spacing(3),\n        width: 150,\n        height: 200,\n        [theme.breakpoints.down('sm')]: {\n            padding: theme.spacing(2)\n        },\n        [theme.breakpoints.down('xs')]: {\n            padding: theme.spacing(1),\n            width: 145,\n            height: 190,\n        }\n    },\n    actionArea: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        alignItems: 'inherit',\n        height: '100%',\n        borderRadius: theme.shape.borderRadius\n    },\n    highlight: {\n        backgroundColor: ({ color }) => (\n            color === 'yellow' ?\n                yellow[600]\n            : color === 'red' ?\n                red[600]\n            : null\n        )\n    },\n    header: {\n        padding: 0\n    },\n    content: {\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        padding: 0\n    },\n    subheader: {\n        color: ({ isClicked }) => isClicked ? red[600] : null\n    }\n}));\n\n/**\n * Callback for events handling.\n * @callback EventHandlerFunction\n */\n\n/**\n * Functional component which renders a custom CustomCard element.\n * @param {Object}               props\n * @param {'yellow'|'red'}       [props.colorTheme] - Color theme of the CustomCard.\n * @param {*}                    props.content      - Content of the CustomCard.\n * @param {boolean}              [props.isClicked]  - Indicates whether the CustomCard is clicked.\n * @param {string}               props.name         - Name of the CustomCard.\n * @param {EventHandlerFunction} props.onClick      - On click function for the CustomCard.\n */\nconst CustomCard = ({\n    colorTheme,\n    content,\n    isClicked = false,\n    name,\n    onClick\n}) => {\n    const classes = useStyles({ color: colorTheme, isClicked });\n\n    let cardContent = (\n        <>\n            <CardHeader\n                classes={{\n                    root: classes.header,\n                    subheader: classes.subheader\n                }}\n                subheader={name}\n            />\n            <div><hr /></div>\n            <CardContent className={classes.content}>\n                <Typography component='div'>\n                    {content}\n                </Typography>\n            </CardContent>\n        </>\n    );\n\n    if (!isClicked) {\n        cardContent = (\n            <CardActionArea\n                classes={{\n                    root: classes.actionArea,\n                    focusHighlight: classes.highlight\n                }}\n                onClick={onClick}\n            >\n                {cardContent}\n            </CardActionArea>\n        );\n    }\n\n    return (\n        <Card className={classes.root} role='button'>\n            {cardContent}\n        </Card>\n    );\n};\n\nexport default CustomCard;\n","import React from 'react';\n\nimport CustomCard   from './CustomCard';\nimport CustomButton from 'components/Common/CustomButton/CustomButton';\n\nimport Box from '@material-ui/core/Box';\n\n/**\n * Callback for events handling.\n * @callback EventHandlerFunction\n */\n\n/**\n * Functional component which wraps the [CustomCard]{@link CustomCard} element. When it is clicked, CustomCardWithButtons passes into the [CustomCard]{@link CustomCard} two clickable [CustomButton]{@link CustomButton} as the content.\n * @param {Object}               props\n * @param {Object}               props.buttons                - Props of the CustomButton to display as the Card's content.\n * @param {Object}               props.buttons.first          - The first CustomButton's props.\n * @param {EventHandlerFunction} props.buttons.first.onClick  - On click function for the first CustomButton.\n * @param {string}               props.buttons.first.text     - Text to display on the first CustomButton.\n * @param {Object}               props.buttons.second         - The second CustomButton's props.\n * @param {EventHandlerFunction} props.buttons.second.onClick - On click function for the second CustomButton.\n * @param {string}               props.buttons.second.text    - Text to display on the second CustomButton.\n *\n * @param {boolean}              props.cardIsClicked - If CustomCard is clicked, then CustomCard onClick will be nullified and two CustomButton will be displayed instead of the content prop.\n * @param {*}                    props.content       - Content of the CustomCard.\n * @param {string}               props.name          - Name of the CustomCard.\n * @param {EventHandlerFunction} props.onClick       - On click function for the CustomCard.\n */\nconst CustomCardWithButtons = ({\n    buttons: { first, second },\n    cardIsClicked,\n    content,\n    name,\n    onClick\n}) => {\n    if (cardIsClicked) {\n        onClick = null;\n        content = (\n            <Box display='flex' flexDirection='column'>\n                <CustomButton\n                    colorTheme='red'\n                    onClick={first.onClick}\n                    text={first.text}\n                />\n                <CustomButton\n                    onClick={second.onClick}\n                    text={second.text}\n                />\n            </Box>\n        );\n    }\n\n    return (\n        <CustomCard\n            colorTheme='red'\n            content={content}\n            isClicked={cardIsClicked}\n            name={name}\n            onClick={onClick}\n        />\n    );\n};\n\nexport default CustomCardWithButtons;\n","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid           from '@material-ui/core/Grid';\nimport Paper          from '@material-ui/core/Paper';\nimport useMediaQuery  from '@material-ui/core/useMediaQuery';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center'\n    }\n}));\n\n/**\n * Renders passed schema with all its items.\n * @param {Object}   props\n * @param {Object}   props.schema                - Schema information.\n * @param {number}   props.schema.id             - Schema id.\n * @param {string}   props.schema.name           - Schema name.\n * @param {string}   [props.schema.description]  - Schema description.\n * @param {Object[]} props.schema.items          - Array of schema items.\n * @param {number}   props.schema.items.id       - Schema item id.\n * @param {string}   props.schema.items.name     - Schema item name.\n * @param {string}   props.schema.items.quantity - Schema item quantity.\n * @param {string}   [props.schema.items.time]   - Schema item time.\n */\nconst Schema = ({ schema }) => {\n    const classes = useStyles();\n    const smScreen = useMediaQuery(theme => theme.breakpoints.down('sm'));\n    const xsScreen = useMediaQuery(theme => theme.breakpoints.down('xs'));\n\n    return (\n        <Grid\n            role='grid'\n            alignContent='center'\n            container\n            justify='center'\n            spacing={xsScreen ? 2 : 3}\n        >\n            <Grid item xs={6}>\n                <Paper className={classes.paper}>\n                    {schema.name}\n                </Paper>\n            </Grid>\n            {typeof schema.description !== 'undefined' ?\n                <Grid item xs={11} sm={10} md={9}>\n                    <Paper className={classes.paper}>\n                        {schema.description}\n                    </Paper>\n                </Grid>\n            : null}\n            {schema.items.map((item, key) => (\n                <Grid\n                    role='gridcell'\n                    container item\n                    justify='center'\n                    alignContent='flex-start'\n                    key={key}\n                    spacing={smScreen ? 1 : 2}\n                    xs={11} sm={6} md={11}\n                >\n                    <Grid item xs={12} md={4}>\n                        <Paper className={classes.paper}>\n                            {item.name}\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <Paper className={classes.paper}>\n                            {item.quantity}\n                        </Paper>\n                    </Grid>\n                    {typeof item.time !== 'undefined' ?\n                        <Grid item xs={12} md={4}>\n                            <Paper className={classes.paper}>\n                                {item.time}\n                            </Paper>\n                        </Grid>\n                    : null}\n                </Grid>\n            ))}\n        </Grid>\n    );\n};\n\nexport default Schema;\n","import React     from 'react';\nimport { Field } from 'react-final-form';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField      from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n    textfield: {\n        backgroundColor: theme.palette.background.paper\n    }\n}));\n\n/**\n * Function with validation rule.\n * @callback ValidationFunction\n * @param {string} value - Value to validate.\n * @returns {boolean} - Indicates whether value is valid.\n */\n\n/**\n * Functional component to wrap the [Field]{@link https://final-form.org/docs/react-final-form/api/Field} component of the [React Final Form]{@link https://final-form.org/react} library.\n * @param {Object}             props\n * @param {boolean}            [props.disabled]    - Indicates whether Field is disabled.\n * @param {string}             props.label         - Field label.\n * @param {boolean}            [props.multiline]   - If multiline is specified, Field is textarea.\n * @param {string}             props.name          - Field name.\n * @param {string}             [props.placeholder] - Field placeholder, if is undefined, label is used.\n * @param {number}             [props.rows]        - Number of rows to display when multiline is true.\n * @param {ValidationFunction} [props.validate]    - Field validation function.\n */\nconst FormField = ({\n    disabled = false,\n    label,\n    multiline = false,\n    name,\n    placeholder,\n    rows,\n    validate\n}) => {\n    const classes = useStyles();\n\n    return (\n        <Field name={name} type='text' validate={validate}>\n            {({ input, meta }) => (\n                <TextField\n                    className={classes.textfield}\n                    disabled={disabled}\n                    error={validate && meta.touched && meta.error}\n                    fullWidth\n                    id={name}\n                    label={label}\n                    multiline={multiline}\n                    placeholder={placeholder || label}\n                    required={!!validate}\n                    rows={rows}\n                    variant='outlined'\n                    {...input}\n                />\n            )}\n        </Field>\n    );\n};\n\nexport default FormField;\n","import React from 'react';\n\nimport CustomButton from 'components/Common/CustomButton/CustomButton';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box            from '@material-ui/core/Box';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexDirection: 'column',\n        [theme.breakpoints.down('sm')]: {\n            flexDirection: 'row',\n            margin: '0 auto'\n        }\n    }\n}));\n\n/**\n * Callback for events handling.\n * @callback EventHandlerFunction\n */\n\n/**\n * Renders [Plates]{@link {Plate}} to add new or remove existing items rows during work with [SchemaFormContainer]{@link SchemaFormContainer}.\n * @param {Object}               props\n * @param {boolean}              props.isRemoveClicked    - Indicates whether Remove Plate is clicked.\n * @param {boolean}              props.showRemove         - If true, show Remove and All Plates.\n * @param {boolean}              props.isRemoveAllClicked - Indicates whether All Plate is clicked.\n * @param {EventHandlerFunction} props.addOnClick         - On click function for Add Plate.\n * @param {EventHandlerFunction} props.removeOnClick      - On click function for Remove Plate.\n * @param {EventHandlerFunction} props.removeAllOnClick   - On click function for All Plate.\n */\nconst FormItemsControls = ({\n    isRemoveClicked,\n    showRemove,\n    isRemoveAllClicked,\n    addOnClick,\n    removeOnClick,\n    removeAllOnClick\n}) => {\n    const classes = useStyles();\n\n    return (\n        <Box\n            className={classes.root}\n            display='flex'\n            role='tablist'\n        >\n            <CustomButton\n                colorTheme='green'\n                onClick={addOnClick}\n                text='Add'\n                type={isRemoveClicked ? 'disabled' : 'shown'}\n            />\n            {showRemove ?\n                <CustomButton\n                    colorTheme='red'\n                    onClick={removeOnClick}\n                    text='Remove'\n                    type={isRemoveClicked ? 'toggled' : 'shown'}\n                />\n            : null}\n            {showRemove && isRemoveClicked ?\n                <CustomButton\n                    colorTheme='red'\n                    onClick={removeAllOnClick}\n                    text='All'\n                    type={isRemoveAllClicked ? 'toggled' : 'shown'}\n                />\n            : null}\n        </Box>\n    );\n};\n\nexport default FormItemsControls;\n","import React from 'react';\nimport cn    from 'classnames';\n\nimport FormField from 'components/SchemaForm/FormField/FormField';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid           from '@material-ui/core/Grid';\nimport useMediaQuery  from '@material-ui/core/useMediaQuery';\nimport red            from '@material-ui/core/colors/red';\n\nconst useStyles = makeStyles((theme) => ({\n    row: {\n        '&:hover': {\n            backgroundColor: red[300],\n            borderRadius: theme.shape.borderRadius,\n            cursor: 'pointer'\n        }\n    },\n    clicked: {\n        backgroundColor: red[500],\n        borderRadius: theme.shape.borderRadius\n    }\n}));\n\n/**\n * On click handler.\n * @callback OnClickFunction\n * @returns {void}\n */\n\n/**\n * Function with validation rule.\n * @callback ValidationFunction\n * @param {string} value - Value to validate.\n * @returns {boolean} - Indicates whether value is valid.\n */\n\n/**\n * Renders FormItemsRow with [FormFields]{@link FormField}.\n * @param {Object}             props\n * @param {boolean}            props.isClicked  - Indicates whether the FormItemsRow is clicked.\n * @param {boolean}            props.isDisabled - Indicates whether fields of the FormItemsRow are disabled.\n * @param {string}             props.name       - Name of the FormItemsRow in the Form.\n * @param {OnClickFunction}    props.onRowClick - On FormItemsRow Click handler.\n * @param {ValidationFunction} props.onValidate - Field validation function.\n */\nconst FormItemsRow = ({\n    isClicked,\n    isDisabled,\n    name,\n    onRowClick,\n    onValidate\n}) => {\n    const classes  = useStyles();\n    const smScreen = useMediaQuery(theme => theme.breakpoints.down('sm'));\n\n    return (\n        <Grid\n            role='gridcell'\n            className={cn({\n                [classes.row]: isDisabled,\n                [classes.clicked]: isClicked\n            })}\n            container item\n            justify='center'\n            onClick={onRowClick}\n            spacing={smScreen ? 1 : 2}\n            xs={11} sm={6} md={11}\n        >\n            <Grid item xs={12} md={4}>\n                <FormField\n                    disabled={isDisabled}\n                    label='Name'\n                    name={`${name}.name`}\n                    validate={onValidate}\n                />\n            </Grid>\n            <Grid item xs={12} md={4}>\n                <FormField\n                    disabled={isDisabled}\n                    label='Quantity'\n                    name={`${name}.quantity`}\n                    validate={onValidate}\n                />\n            </Grid>\n            <Grid item xs={12} md={4}>\n                <FormField\n                    disabled={isDisabled}\n                    label='Time'\n                    name={`${name}.time`}\n                />\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default FormItemsRow;\n","import React          from 'react';\nimport { FieldArray } from 'react-final-form-arrays';\n\nimport FormItemsRow from './FormItemsRow/FormItemsRow';\n\n/**\n * Function with validation rule.\n * @callback ValidationFunction\n * @param {string} value - Value to validate.\n * @returns {boolean} - Indicates whether value is valid.\n */\n\n/**\n * Renders Schema's items in the table-like style with the help of the [FieldArray]{@link https://github.com/final-form/react-final-form-arrays#fieldarray--reactcomponenttypefieldarrayprops} and [FormField]{@link FormField}.\n * @param {Object}             props\n * @param {Object[]}           props.initItems          - Initial values of the schema's items.\n * @param {number}             props.initItems.id       - Initial item id.\n * @param {string}             props.initItems.name     - Initial item name.\n * @param {string}             props.initItems.quantity - Initial item quantity.\n * @param {string}             props.initItems.time     - Initial item time.\n * @param {boolean}            props.isRemoveClicked    - Indicates whether Remove button is clicked.\n * @param {number[]}           props.itemsIdsToRemove   - Array of items ids to remove from the form.\n * @param {function}           props.onItemsRowClick    - On item row click function.\n * @param {ValidationFunction} props.onValidate         - Field validation function.\n */\nconst FormItems = ({\n    initItems,\n    isRemoveClicked,\n    itemsIdsToRemove,\n    onItemsRowClick,\n    onValidate\n}) => {\n    const onRowClick = (id) => () => onItemsRowClick(id);\n\n    return (\n        <FieldArray\n            name='items'\n            initialValue={initItems}\n            render={({ fields }) => fields.map((name, index) => (\n                <FormItemsRow\n                    key={index}\n                    isClicked={itemsIdsToRemove.indexOf(index) !== -1}\n                    isDisabled={isRemoveClicked}\n                    name={name}\n                    onRowClick={onRowClick(index)}\n                    onValidate={onValidate}\n                />\n            ))}\n        />\n    );\n};\n\nexport default FormItems;\n","import React from 'react';\n\nimport CustomButton from 'components/Common/CustomButton/CustomButton';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box            from '@material-ui/core/Box';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexDirection: 'column',\n        [theme.breakpoints.down('sm')]: {\n            flexDirection: 'row',\n            margin: '0 auto'\n        }\n    }\n}));\n\n/**\n * Callback for events handling.\n * @callback EventHandlerFunction\n */\n\n/**\n * Renders [CustomButtons]{@link CustomButton} as form buttons.\n * @param {Object}               props\n * @param {Object}               props.submit            - Props for the Submit CustomButton.\n * @param {boolean}              props.submit.isDisabled - Indicates whether CustomButton is disabled.\n * @param {EventHandlerFunction} props.submit.onClick    - On click function for Submit CustomButton.\n * @param {Object}               props.reset             - Props for the Reset CustomButton.\n * @param {boolean}              props.reset.isDisabled  - Indicates whether CustomButton is disabled.\n * @param {EventHandlerFunction} props.reset.onClick     - On click function for Reset CustomButton.\n * @param {Object}               props.cancel            - Props for the Cancel CustomButton.\n * @param {boolean}              props.cancel.isDisabled - Indicates whether CustomButton is disabled.\n * @param {EventHandlerFunction} props.cancel.onClick    - On click function for Cancel CustomButton.\n */\nconst FormButtons = ({ submit, reset, cancel }) => {\n    const classes = useStyles();\n\n    return (\n        <Box\n            className={classes.root}\n            display='flex'\n            role='tablist'\n        >\n            <CustomButton\n                colorTheme='green'\n                onClick={submit.onClick}\n                text='Submit'\n                type={submit.isDisabled ? 'disabled' : 'shown'}\n            />\n            <CustomButton\n                colorTheme='yellow'\n                onClick={reset.onClick}\n                text='Reset'\n                type={reset.isDisabled ? 'disabled' : 'shown'}\n            />\n            <CustomButton\n                colorTheme='red'\n                onClick={cancel.onClick}\n                text='Cancel'\n                type={cancel.isDisabled ? 'disabled' : 'shown'}\n            />\n        </Box>\n    );\n};\n\nexport default FormButtons;\n","import { useState } from 'react';\n\nconst useRemoveItems = () => {\n    const [isRemoveClicked, setIsRemoveClicked] = useState(false);\n    const [itemsIdsToRemove, setItemsIdsToRemove] = useState([]);\n    const [isRemoveAllClicked, setIsRemoveAllClicked] = useState(false);\n\n    const removeOnClick = (removeBatch) => {\n        if (isRemoveClicked && itemsIdsToRemove.length) {\n            removeBatch('items', itemsIdsToRemove);\n            setItemsIdsToRemove([]);\n            setIsRemoveAllClicked(false);\n        }\n        setIsRemoveClicked(!isRemoveClicked);\n    };\n\n    const removeAllOnClick = (items) => {\n        if (isRemoveAllClicked) {\n            setItemsIdsToRemove([]);\n        } else {\n            setItemsIdsToRemove([...items.keys()]);\n        }\n        setIsRemoveAllClicked(!isRemoveAllClicked);\n    };\n\n    const onItemsRowClick = (items) => (index) => {\n        if (isRemoveClicked) {\n            let newItemsIdsToRemove = [...itemsIdsToRemove];\n\n            if (itemsIdsToRemove.indexOf(index) !== -1) {\n                newItemsIdsToRemove = itemsIdsToRemove.filter((id) => id !== index);\n            } else {\n                newItemsIdsToRemove = itemsIdsToRemove.concat(index);\n            }\n\n            setItemsIdsToRemove(newItemsIdsToRemove);\n            setIsRemoveAllClicked(items.length === newItemsIdsToRemove.length);\n        }\n    };\n\n    return [\n        { isRemoveClicked, isRemoveAllClicked, itemsIdsToRemove },\n        { removeOnClick, removeAllOnClick, onItemsRowClick }\n    ];\n};\n\nexport default useRemoveItems;\n","import React from 'react';\n\nimport { Form }      from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\n\nimport FormField         from './FormField/FormField';\nimport FormItemsControls from './FormItemsControls/FormItemsControls';\nimport FormItems         from './FormItems/FormItems';\nimport FormButtons       from './FormButtons/FormButtons';\nimport useRemoveItems    from './utils/useRemoveItems';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box            from '@material-ui/core/Box';\nimport Grid           from '@material-ui/core/Grid';\nimport useMediaQuery  from '@material-ui/core/useMediaQuery';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexDirection: 'row',\n        [theme.breakpoints.down('sm')]: {\n            flexDirection: 'column'\n        }\n    },\n    bar: {\n        flexDirection: 'column',\n        backgroundColor: theme.palette.background.default,\n        [theme.breakpoints.down('sm')]: {\n            flexDirection: 'row',\n            marginBottom: theme.spacing(2)\n        }\n    },\n    form: {\n        width: '100%'\n    }\n}));\n\n/**\n * Callback for events handling.\n * @callback EventHandlerFunction\n */\n\n/**\n * Form container to add or edit schemas.\n * [React Final Form]{@link https://final-form.org/react} library is used.\n * @param {Object}               props\n * @param {Object}               props.schema                - Initial data for the form.\n * @param {number}               [props.schema.id]           - Schema id.\n * @param {string}               [props.schema.name]         - Schema name.\n * @param {string}               [props.schema.description]  - Schema description.\n * @param {Object[]}             props.schema.items          - Array of schema items.\n * @param {number}               props.schema.items.id       - Schema item id.\n * @param {string}               props.schema.items.name     - Schema item name.\n * @param {string}               props.schema.items.quantity - Schema item quantity.\n * @param {string}               [props.schema.items.time]   - Schema item time.\n * @param {EventHandlerFunction} props.onSubmit              - On click function for Submit Plate.\n * @param {EventHandlerFunction} props.onCancel              - On click function for Cancel Plate.\n */\nconst SchemaFormContainer = ({ schema, onSubmit, onCancel }) => {\n    const classes = useStyles();\n    const xsScreen = useMediaQuery(theme => theme.breakpoints.down('xs'));\n\n    const [\n        { isRemoveClicked, isRemoveAllClicked, itemsIdsToRemove },\n        { removeOnClick, removeAllOnClick, onItemsRowClick }\n    ] = useRemoveItems();\n\n    const addOnClick = (push, items) => {\n        push(\n            'items',\n            {\n                id: (\n                    items.length ?\n                        items[items.length - 1].id + 1\n                    : 1\n                ),\n                name: '', quantity: '', time: ''\n            }\n        );\n    };\n\n    const required = (value) => !value;\n\n    return (\n        <Form\n            onSubmit={onSubmit}\n            initialValues={schema}\n            mutators={{...arrayMutators}}\n            render={({\n                handleSubmit,\n                form: { mutators: { push, removeBatch }, submit, reset },\n                submitting,\n                dirty,\n                initialValues,\n                values\n            }) => (\n                <Box\n                    className={classes.root}\n                    display='flex'\n                >\n                    <Box position='sticky' top={0} zIndex='appBar'>\n                        <Box position='sticky' top={0}>\n                            <Box\n                                className={classes.bar}\n                                display='flex'\n                                flexWrap='wrap'\n                            >\n                                <FormButtons\n                                    submit={({\n                                        isDisabled: isRemoveClicked || submitting,\n                                        onClick: submit\n                                    })}\n                                    reset={({\n                                        isDisabled: isRemoveClicked || submitting || !dirty,\n                                        onClick: reset\n                                    })}\n                                    cancel={({\n                                        isDisabled: isRemoveClicked || submitting,\n                                        onClick: onCancel\n                                    })}\n                                />\n                                <FormItemsControls\n                                    isRemoveClicked={isRemoveClicked}\n                                    showRemove={!!values.items.length}\n                                    isRemoveAllClicked={isRemoveAllClicked}\n                                    addOnClick={() => addOnClick(push, values.items)}\n                                    removeOnClick={() => removeOnClick(removeBatch)}\n                                    removeAllOnClick={() => removeAllOnClick(values.items)}\n                                />\n                            </Box>\n                        </Box>\n                    </Box>\n                    <form className={classes.form} onSubmit={handleSubmit} role='table'>\n                        <Grid\n                            alignContent='center'\n                            container\n                            justify='center'\n                            spacing={xsScreen ? 2 : 3}\n                        >\n                            <Grid item xs={6}>\n                                <FormField\n                                    disabled={isRemoveClicked}\n                                    label='Schema Name'\n                                    name='name'\n                                    validate={required}\n                                />\n                            </Grid>\n                            <Grid item xs={11} sm={10} md={9}>\n                                <FormField\n                                    disabled={isRemoveClicked}\n                                    label='Schema Description'\n                                    multiline\n                                    name='description'\n                                    rows={2}\n                                />\n                            </Grid>\n                            <FormItems\n                                initItems={initialValues.items}\n                                isRemoveClicked={isRemoveClicked}\n                                itemsIdsToRemove={itemsIdsToRemove}\n                                onItemsRowClick={onItemsRowClick(values.items)}\n                                onValidate={required}\n                            />\n                        </Grid>\n                    </form>\n                </Box>\n            )}\n        />\n    );\n};\n\nexport default SchemaFormContainer;\n","import React       from 'react';\nimport { connect } from 'react-redux';\n\nimport CustomCard            from 'components/Common/CustomCard/CustomCard';\nimport CustomCardWithButtons from 'components/Common/CustomCard/CustomCardWithButtons';\nimport Schema                from 'components/Schema/Schema';\nimport SchemaFormContainer   from 'components/SchemaForm/SchemaFormContainer';\n\nimport { addSchema, updateSchema, deleteSchema } from 'redux/reducers/schemas';\nimport { selectSchema, setMode, UiModes }        from 'redux/reducers/ui';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box            from '@material-ui/core/Box';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        rowGap: '3vh',\n        [theme.breakpoints.down('sm')]: {\n            rowGap: '2vh'\n        },\n        [theme.breakpoints.down('xs')]: {\n            rowGap: '1vh'\n        }\n    }\n}));\n\n/**\n * Callback for events handling.\n * @callback EventHandlerFunction\n */\n\n/** \n * Component to display a list of all Schemas by [Card]{@link Card} or [CardWithButtons]{@link CardWithButtons} or a single selected [Schema]{@link Schema} or [SchemaFormContainer]{@link SchemaFormContainer}.\n * The displayed content depends on value of the selectedSchemaId and mode parameters.\n * @param {Object}               props\n * @param {Object[]}             props.schemas                - The data of the all schemas from the Redux State.\n * @param {number}               props.schemas.id             - Schema id.\n * @param {string}               props.schemas.name           - Schema name.\n * @param {string}               [props.schemas.description]  - Schema description.\n * @param {Object[]}             props.schemas.items          - Array of schema items.\n * @param {number}               props.schemas.items.id       - Schema item id.\n * @param {string}               props.schemas.items.name     - Schema item name.\n * @param {string}               props.schemas.items.quantity - Schema item quantity.\n * @param {string}               props.schemas.items.time     - Schema item time.\n *\n * @param {number|null}          props.selectedSchemaId       - The id of the selected schema from the Redux State.\n * @param {string}               props.mode                   - The current ui mode from the Redux State.\n * @param {EventHandlerFunction} props.addSchema              - A function to add schema.\n * @param {EventHandlerFunction} props.updateSchema           - A function to update schema.\n * @param {function}             props.deleteSchema           - A function to delete schema.\n * @param {function}             props.selectSchema           - A function to select schema.\n * @param {function}             props.setMode                - A function to set current ui mode.\n */\nconst SchemasBoard = ({\n    schemas,\n    selectedSchemaId,\n    mode,\n    addSchema,\n    updateSchema,\n    deleteSchema,\n    selectSchema,\n    setMode\n}) => {\n    const classes = useStyles();\n    const isAdd    = mode === UiModes.ADD;\n    const isEdit   = mode === UiModes.EDIT;\n    const isDelete = mode === UiModes.DELETE;\n\n    const onDeleteClick = (id) => () => deleteSchema(id);\n    const onCancelAddClick = () => setMode(UiModes.SHOW);\n    const onClickResetSchema = () => selectSchema(null);\n    const selectClickedSchema = (id) => () => selectSchema(id)\n\n    let schemasBoard;\n\n    if (selectedSchemaId) {\n        if (isEdit) {\n            schemasBoard = <SchemaFormContainer\n                schema={schemas.find(schema => schema.id === selectedSchemaId)}\n                onSubmit={updateSchema}\n                onCancel={onClickResetSchema}\n            />;\n        } else if (isDelete) {\n            schemasBoard = (\n                <Box\n                    className={classes.root}\n                    display='flex'\n                    flexWrap='wrap'\n                    justifyContent='space-evenly'\n                >\n                    {schemas.map((schema) => (\n                        <CustomCardWithButtons\n                            buttons={({\n                                first: {\n                                    onClick: onDeleteClick(schema.id),\n                                    text: 'Delete'\n                                },\n                                second: {\n                                    onClick: onClickResetSchema,\n                                    text: 'Cancel'\n                                }\n                            })}\n                            cardIsClicked={schema.id === selectedSchemaId}\n                            content={schema.items.map((item) => <div key={item.id}>{item.name}</div>)}\n                            key={schema.id}\n                            name={schema.name}\n                            onClick={selectClickedSchema(schema.id)}\n                        />\n                    ))}\n                </Box>\n            );\n        } else {\n            schemasBoard = <Schema\n                schema={schemas.find(schema => schema.id === selectedSchemaId)}\n            />;\n        }\n    } else {\n        if (isAdd) {\n            schemasBoard = <SchemaFormContainer\n                schema={{items: []}}\n                onSubmit={addSchema}\n                onCancel={onCancelAddClick}\n            />;\n        } else {\n            const cardColorTheme = (\n                isEdit ?\n                    'yellow'\n                : isDelete ?\n                    'red'\n                : null\n            );\n\n            schemasBoard = (\n                <Box\n                    className={classes.root}\n                    display='flex'\n                    flexWrap='wrap'\n                    justifyContent='space-evenly'\n                >\n                    {schemas.map((schema) => (\n                        <CustomCard\n                            colorTheme={cardColorTheme}\n                            content={schema.items.map((item) => <div key={item.id}>{item.name}</div>)}\n                            key={schema.id}\n                            name={schema.name}\n                            onClick={selectClickedSchema(schema.id)}\n                        />\n                    ))}\n                </Box>\n            );\n        }\n    }\n\n    return schemasBoard;\n}\n\nexport default connect(\n    (state) => ({\n        schemas: state.schemas,\n        selectedSchemaId: state.ui.selectedSchemaId,\n        mode: state.ui.mode\n    }),\n    { addSchema, updateSchema, deleteSchema, selectSchema, setMode }\n)(SchemasBoard);\n","import React from 'react';\n\nimport SchemasBoardContainer from 'components/SchemasBoard/SchemasBoardContainer';\n\nimport { Box } from '@material-ui/core';\n\n/**\n * Component for rendering the main part of the app.\n * @param {Object}  props\n * @param {boolean} props.isSchemasClicked - If true, [SchemasBoardContainer]{@link SchemasBoardContainer} will be rendered.\n */\nconst Content = ({ isSchemasClicked }) => (\n    <Box p={'2%'}>\n        {isSchemasClicked && <SchemasBoardContainer />}\n    </Box>\n);\n\nexport default Content;\n","import React, { useState } from 'react';\n\nimport HeaderContainer  from 'components/Header/HeaderContainer';\nimport ContentContainer from 'components/Content/ContentContainer';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container      from '@material-ui/core/Container';\nimport Box            from '@material-ui/core/Box';\nimport grey           from '@material-ui/core/colors/grey';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minHeight: '100vh',\n        backgroundColor: grey[50]\n    },\n    gutters: {\n        [theme.breakpoints.down('xs')]: {\n          paddingLeft: 0,\n          paddingRight: 0\n        }\n    }\n}));\n\nconst App = () => {\n    const classes = useStyles();\n    // TODO isSchemasClicked is set true while profile isn't available\n    const [isSchemasClicked, setIsSchemasClicked] = useState(true);\n\n    return (\n        <Container className={classes.gutters}>\n            <Box display='flex' flexDirection='column' className={classes.root}>\n                <HeaderContainer\n                    isSchemasClicked={isSchemasClicked}\n                    setIsSchemasClicked={setIsSchemasClicked}\n                />\n                <ContentContainer isSchemasClicked={isSchemasClicked} />\n            </Box>\n        </Container>\n    );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\n\nimport profile from './profile';\nimport schemas from './schemas';\nimport ui      from './ui';\n\nconst reducer = combineReducers({\n    // profile,\n    schemas,\n    ui\n});\n\nexport default reducer;\n","import React        from 'react';\nimport ReactDOM     from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport 'index.css';\nimport App from 'App';\n\nimport configureStore from 'redux/store/configureStore';\nimport API from 'api';\n\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\n// TODO demo profile\nAPI.init('Profile 1');\n// TODO with demo schema\nif (!API.loadData().schemas.length) {\n  API.saveData({\"schemas\":[{\"id\":1,\"name\":\"Demo Schema 1\",\"description\":\"Demo Schema 1 Description\",\"items\":[{\"id\":1,\"name\":\"Item 1\",\"quantity\":\"Quantity 1\",\"time\":\"Time 1\"},{\"id\":2,\"name\":\"Item 2\",\"quantity\":\"Quantity 2\",\"time\":\"Time 2\"},{\"id\":3,\"name\":\"Item 3\",\"quantity\":\"Quantity 3\",\"time\":\"Time 3\"},{\"id\":4,\"name\":\"Item 4\",\"quantity\":\"Quantity 4\",\"time\":\"Time 4\"},{\"id\":5,\"name\":\"Item 5\",\"quantity\":\"Quantity 5\",\"time\":\"Time 5\"},{\"id\":6,\"name\":\"Item 6\",\"quantity\":\"Quantity 6\",\"time\":\"Time 6\"},{\"id\":7,\"name\":\"Item 7\",\"quantity\":\"Quantity 7\",\"time\":\"Time 7\"},{\"id\":8,\"name\":\"Item 8\",\"quantity\":\"Quantity 8\",\"time\":\"Time 8\"},{\"id\":10,\"name\":\"Item 10\",\"quantity\":\"Quantity 10\",\"time\":\"Time 10\"},{\"id\":11,\"name\":\"Item 11\",\"quantity\":\"Quantity 11\",\"time\":\"Time 11\"},{\"id\":12,\"name\":\"Item 12\",\"quantity\":\"Quantity 12\",\"time\":\"Time 12\"},{\"id\":13,\"name\":\"Item 13\",\"quantity\":\"Quantity 13\",\"time\":\"Time 13\"},{\"id\":14,\"name\":\"Item 14\",\"quantity\":\"Quantity 14\",\"time\":\"Time 14\"},{\"id\":15,\"name\":\"Item 15\",\"quantity\":\"Quantity 15\",\"time\":\"Time 15\"}]}]});\n}\n\nconst store = configureStore(API.loadData());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={createMuiTheme()}>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk  from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport reducer from 'redux/reducers';\n\nexport default function configureStore(preloadedState) {\n    const middlewares = [thunk, logger];\n    const middlewareEnhancer = applyMiddleware(...middlewares);\n\n    const storeEnhancers = [middlewareEnhancer];\n    const composeEnhancers = (\n        typeof window !== 'undefined' &&\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ) || compose;\n    const composedEnhancer = composeEnhancers(...storeEnhancers);\n\n    const store = createStore(\n        reducer,\n        preloadedState,\n        composedEnhancer\n    );\n\n    return store;\n}\n"],"sourceRoot":""}